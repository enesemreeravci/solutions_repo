{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Deriving the Equations of Motion Projectile motion can be analyzed by breaking it into horizontal and vertical components. Assuming no air resistance, the only acceleration is due to gravity, acting downward. This assumption simplifies the equations, making it easier to analyze motion using basic kinematic principles. Horizontal Motion: The horizontal component of velocity remains constant since there is no horizontal acceleration. The displacement in the horizontal direction is given by: \\( \\(x = v_0 \\cdot \\cos(\\theta) \\cdot t\\) \\) This equation shows that the horizontal motion is uniform and independent of gravity. Vertical Motion: The vertical component of velocity changes due to gravitational acceleration. The displacement in the vertical direction is given by: \\( \\(y = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} \\cdot g \\cdot t^2\\) \\) The vertical component influences the total time of flight and peak height of the projectile. Time of Flight For a projectile launched from ground level ( \\(h = 0\\) ), it reaches the ground when \\(y = 0\\) . Solving for time: \\[t = \\frac{2 v_0 \\sin(\\theta)}{g}\\] If launched from an initial height \\(h\\) , the time of flight adjusts: \\[t = \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\] Range For ground level ( \\(h = 0\\) ): \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\] For an initial height \\(h\\) : \\[R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\] In chaotic situations (e.g., variable wind), range can be modeled with a perturbation term: \\[R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\] where \\(\\delta R\\) is a random noise factor (e.g., from wind gusts), typically drawn from a distribution like \\(\\delta R \\sim \\mathcal{N}(0, \\sigma)\\) , with \\(\\sigma\\) representing the noise magnitude. Family of Solutions From the range formulas\u2014 \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) (for \\(h = 0\\) ), \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) (for \\(h > 0\\) ), and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) (for noise)\u2014we derive a family of solutions for different \\(\\theta\\) , \\(v_0\\) , \\(g\\) , \\(h\\) , and environmental variability. Notably: For \\(h = 0\\) , symmetry holds around \\(45^\\circ\\) . Height \\(h\\) extends range and shifts optimal angles. Noise \\(\\delta R\\) introduces unpredictability, mimicking real-world turbulence. 2. Practical Applications Real-World Scenarios Projectile motion applies to various real-world cases, including: Sports : Soccer free kicks from elevated positions (e.g., 20 m) adjust for height. Basketball shots from a 3 m hoop height tweak the arc for success. Engineering : Artillery on a 50 m hill uses height-adjusted range for targeting. Space Exploration & Astrophysics : Spacecraft landings on uneven terrain require precise trajectory calculations. Meteor paths vary with atmospheric turbulence, a chaotic factor. Adaptations Uneven Terrain : Use \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height variations. Air Resistance : Consider drag force, reducing range systematically. Chaotic Situations : Model wind gusts or turbulence with \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) , where \\(\\delta R\\) varies randomly. 3. Implementation Graphical Outputs Figure 1: Range as a Function of Angle of Projection (v\u2080 = 50 m/s, h = 0) Figure 2: Range vs Angle for Different Initial Velocities and Heights Figure 3: Chaotic Range with Environmental Noise (v\u2080 = 50 m/s, h = 0) Python Simulation import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s\u00b2) def calculate_range(v0, theta, h=0, chaotic=False, sigma=10): theta_rad = np.radians(theta) if h == 0 and not chaotic: return (v0**2 * np.sin(2 * theta_rad)) / g elif h > 0 and not chaotic: t = (v0 * np.sin(theta_rad) + np.sqrt((v0 * np.sin(theta_rad))**2 + 2 * g * h)) / g return v0 * np.cos(theta_rad) * t else: # Chaotic case R = (v0**2 * np.sin(2 * theta_rad)) / g delta_R = np.random.normal(0, sigma) # Random noise return R + delta_R angles = np.linspace(0, 90, 100) v0_values = [20, 50, 80] h_values = [0, 10] # Figure 2: Velocity and Height Variations plt.figure(figsize=(10, 6)) for v0 in v0_values: for h in h_values: ranges = [calculate_range(v0, angle, h) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s, h = {h} m') plt.axvline(x=45, linestyle='--', color='black', label='Reference at 45\u00b0') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs Angle for Various Velocities and Heights') plt.grid(True) plt.legend() plt.tight_layout() plt.show() # Figure 3: Chaotic Range plt.figure(figsize=(10, 6)) v0 = 50 chaotic_ranges = [calculate_range(v0, angle, h=0, chaotic=True, sigma=20) for angle in angles] plt.scatter(angles, chaotic_ranges, s=10, alpha=0.5, label='Chaotic Range (v\u2080 = 50 m/s)') ideal_ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ideal_ranges, 'r--', label='Ideal Range') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Chaotic Range with Environmental Noise') plt.grid(True) plt.legend() plt.tight_layout() plt.show() Python code simulates range with height and chaotic noise. Code available upon request. Graphical Interpretation Figure 1 : Range vs. angle for \\(v_0 = 50\\) m/s, \\(h = 0\\) , peaking at 45\u00b0. Figure 2 : Compares velocities and heights, showing increased range with \\(h\\) . Figure 3 : Displays chaotic range for \\(v_0 = 50\\) m/s with random noise ( \\(\\sigma = 20\\) m), scattering around the ideal curve, simulating wind gusts. 4. Limitations and Extensions Limitations Idealized Model : Assumes no air resistance or spin. Chaotic model is simplistic, ignoring directional wind effects. External Factors : Complex terrain and altitude variations are partially addressed with \\(h\\) . Suggestions for Improvement Incorporate Drag : Use \\(F_d = -k \\cdot v\\) for systematic range reduction. Advanced Chaos : Model wind direction and speed dynamically. Variable Gravity : Adjust \\(g\\) for different environments. Interactive Tools : Allow inputs for \\(v_0\\) , \\(\\theta\\) , \\(h\\) , and noise levels. Example Scenarios Basketball Shot with Wind : A player shoots from 5 m away, aiming for a 3 m high hoop ( \\(h = 3\\) m), with \\(v_0 = 10\\) m/s at \\(\\theta = 50^\\circ\\) . Using \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) , the range is ~5.2 m, just overshooting. A sudden wind gust ( \\(\\delta R = -0.5\\) m) reduces it to 4.7 m, missing the hoop, showing how chaos affects precision. Artillery on a Cliff : A cannon on a 20 m cliff ( \\(h = 20\\) m) fires at \\(v_0 = 100\\) m/s, \\(\\theta = 30^\\circ\\) . The height-adjusted range is ~1018 m, far beyond the 866 m for \\(h = 0\\) . In turbulent conditions ( \\(R_{\\text{chaotic}}\\) with \\(\\sigma = 50\\) m), the range could vary between 968 m and 1068 m, complicating targeting. Conclusion This investigation explores projectile range as a function of angle, velocity, height, and environmental chaos. The extended formulas\u2014 \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) for noise\u2014enhance the model\u2019s versatility, connecting theory to applications like artillery on hills or sports shots in windy conditions. Future work could refine chaotic effects with directional wind or drag for greater realism.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Investigating the Range as a Function of the Angle of Projection","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"Projectile motion can be analyzed by breaking it into horizontal and vertical components. Assuming no air resistance, the only acceleration is due to gravity, acting downward. This assumption simplifies the equations, making it easier to analyze motion using basic kinematic principles.","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"The horizontal component of velocity remains constant since there is no horizontal acceleration. The displacement in the horizontal direction is given by: \\( \\(x = v_0 \\cdot \\cos(\\theta) \\cdot t\\) \\) This equation shows that the horizontal motion is uniform and independent of gravity.","title":"Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical component of velocity changes due to gravitational acceleration. The displacement in the vertical direction is given by: \\( \\(y = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} \\cdot g \\cdot t^2\\) \\) The vertical component influences the total time of flight and peak height of the projectile.","title":"Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"For a projectile launched from ground level ( \\(h = 0\\) ), it reaches the ground when \\(y = 0\\) . Solving for time: \\[t = \\frac{2 v_0 \\sin(\\theta)}{g}\\] If launched from an initial height \\(h\\) , the time of flight adjusts: \\[t = \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\]","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range","text":"For ground level ( \\(h = 0\\) ): \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\] For an initial height \\(h\\) : \\[R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\] In chaotic situations (e.g., variable wind), range can be modeled with a perturbation term: \\[R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\] where \\(\\delta R\\) is a random noise factor (e.g., from wind gusts), typically drawn from a distribution like \\(\\delta R \\sim \\mathcal{N}(0, \\sigma)\\) , with \\(\\sigma\\) representing the noise magnitude.","title":"Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"From the range formulas\u2014 \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) (for \\(h = 0\\) ), \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) (for \\(h > 0\\) ), and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) (for noise)\u2014we derive a family of solutions for different \\(\\theta\\) , \\(v_0\\) , \\(g\\) , \\(h\\) , and environmental variability. Notably: For \\(h = 0\\) , symmetry holds around \\(45^\\circ\\) . Height \\(h\\) extends range and shifts optimal angles. Noise \\(\\delta R\\) introduces unpredictability, mimicking real-world turbulence.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-practical-applications","text":"","title":"2. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-scenarios","text":"Projectile motion applies to various real-world cases, including: Sports : Soccer free kicks from elevated positions (e.g., 20 m) adjust for height. Basketball shots from a 3 m hoop height tweak the arc for success. Engineering : Artillery on a 50 m hill uses height-adjusted range for targeting. Space Exploration & Astrophysics : Spacecraft landings on uneven terrain require precise trajectory calculations. Meteor paths vary with atmospheric turbulence, a chaotic factor.","title":"Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#adaptations","text":"Uneven Terrain : Use \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height variations. Air Resistance : Consider drag force, reducing range systematically. Chaotic Situations : Model wind gusts or turbulence with \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) , where \\(\\delta R\\) varies randomly.","title":"Adaptations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-implementation","text":"","title":"3. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-outputs","text":"Figure 1: Range as a Function of Angle of Projection (v\u2080 = 50 m/s, h = 0) Figure 2: Range vs Angle for Different Initial Velocities and Heights Figure 3: Chaotic Range with Environmental Noise (v\u2080 = 50 m/s, h = 0)","title":"Graphical Outputs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s\u00b2) def calculate_range(v0, theta, h=0, chaotic=False, sigma=10): theta_rad = np.radians(theta) if h == 0 and not chaotic: return (v0**2 * np.sin(2 * theta_rad)) / g elif h > 0 and not chaotic: t = (v0 * np.sin(theta_rad) + np.sqrt((v0 * np.sin(theta_rad))**2 + 2 * g * h)) / g return v0 * np.cos(theta_rad) * t else: # Chaotic case R = (v0**2 * np.sin(2 * theta_rad)) / g delta_R = np.random.normal(0, sigma) # Random noise return R + delta_R angles = np.linspace(0, 90, 100) v0_values = [20, 50, 80] h_values = [0, 10] # Figure 2: Velocity and Height Variations plt.figure(figsize=(10, 6)) for v0 in v0_values: for h in h_values: ranges = [calculate_range(v0, angle, h) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s, h = {h} m') plt.axvline(x=45, linestyle='--', color='black', label='Reference at 45\u00b0') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs Angle for Various Velocities and Heights') plt.grid(True) plt.legend() plt.tight_layout() plt.show() # Figure 3: Chaotic Range plt.figure(figsize=(10, 6)) v0 = 50 chaotic_ranges = [calculate_range(v0, angle, h=0, chaotic=True, sigma=20) for angle in angles] plt.scatter(angles, chaotic_ranges, s=10, alpha=0.5, label='Chaotic Range (v\u2080 = 50 m/s)') ideal_ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ideal_ranges, 'r--', label='Ideal Range') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Chaotic Range with Environmental Noise') plt.grid(True) plt.legend() plt.tight_layout() plt.show() Python code simulates range with height and chaotic noise. Code available upon request.","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-interpretation","text":"Figure 1 : Range vs. angle for \\(v_0 = 50\\) m/s, \\(h = 0\\) , peaking at 45\u00b0. Figure 2 : Compares velocities and heights, showing increased range with \\(h\\) . Figure 3 : Displays chaotic range for \\(v_0 = 50\\) m/s with random noise ( \\(\\sigma = 20\\) m), scattering around the ideal curve, simulating wind gusts.","title":"Graphical Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-limitations-and-extensions","text":"","title":"4. Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"Idealized Model : Assumes no air resistance or spin. Chaotic model is simplistic, ignoring directional wind effects. External Factors : Complex terrain and altitude variations are partially addressed with \\(h\\) .","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions-for-improvement","text":"Incorporate Drag : Use \\(F_d = -k \\cdot v\\) for systematic range reduction. Advanced Chaos : Model wind direction and speed dynamically. Variable Gravity : Adjust \\(g\\) for different environments. Interactive Tools : Allow inputs for \\(v_0\\) , \\(\\theta\\) , \\(h\\) , and noise levels.","title":"Suggestions for Improvement"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#example-scenarios","text":"Basketball Shot with Wind : A player shoots from 5 m away, aiming for a 3 m high hoop ( \\(h = 3\\) m), with \\(v_0 = 10\\) m/s at \\(\\theta = 50^\\circ\\) . Using \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) , the range is ~5.2 m, just overshooting. A sudden wind gust ( \\(\\delta R = -0.5\\) m) reduces it to 4.7 m, missing the hoop, showing how chaos affects precision. Artillery on a Cliff : A cannon on a 20 m cliff ( \\(h = 20\\) m) fires at \\(v_0 = 100\\) m/s, \\(\\theta = 30^\\circ\\) . The height-adjusted range is ~1018 m, far beyond the 866 m for \\(h = 0\\) . In turbulent conditions ( \\(R_{\\text{chaotic}}\\) with \\(\\sigma = 50\\) m), the range could vary between 968 m and 1068 m, complicating targeting.","title":"Example Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This investigation explores projectile range as a function of angle, velocity, height, and environmental chaos. The extended formulas\u2014 \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) for noise\u2014enhance the model\u2019s versatility, connecting theory to applications like artillery on hills or sports shots in windy conditions. Future work could refine chaotic effects with directional wind or drag for greater realism.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation Deriving the Equations of Motion The forced damped pendulum is governed by a second-order nonlinear differential equation that accounts for gravity (restoring force), damping (friction), and an external periodic force. The equation of motion is: \\[\\frac{d^2 \\theta}{dt^2} + b \\frac{d \\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = F \\cos(\\omega t)\\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient \\(g\\) : Gravitational acceleration ( \\(\\mathrm{m/s^2}\\) ) \\(L\\) : Pendulum length (m) \\(F\\) : Driving force amplitude (s \\(^{-2}\\) ) \\(\\omega\\) : Driving frequency (rad/s) \\(t\\) : Time (s) Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to a linear form: \\(\\frac{d^2 \\theta}{dt^2} + b \\frac{d \\theta}{dt} + \\omega_0^2 \\theta = F \\cos(\\omega t)\\) Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. The steady-state solution for this driven, damped harmonic oscillator is: \\(\\theta(t) = A \\cos(\\omega t - \\phi)\\) Where: - Amplitude: \\(A = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}}\\) - Phase: \\(\\phi = \\tan^{-1}\\left(\\frac{b \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) Resonance Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) , maximizing amplitude when \\(\\omega = \\sqrt{\\omega_0^2 - \\frac{b^2}{2}}\\) (for underdamped cases, \\(b < 2 \\omega_0\\) ). This amplifies energy transfer from the external force to the pendulum. Family of Solutions The nonlinear equation admits a range of behaviors\u2014periodic, quasiperiodic, and chaotic\u2014depending on \\(b\\) , \\(F\\) , and \\(\\omega\\) . For small \\(F\\) and \\(b\\) , motion is regular; for larger values, chaos emerges, as explored below. 2. Analysis of Dynamics Parameter Influence Damping Coefficient ( \\(b\\) ) : Low \\(b\\) allows sustained oscillations; high \\(b\\) suppresses motion, leading to decay. Driving Amplitude ( \\(F\\) ) : Small \\(F\\) produces linear-like motion; large \\(F\\) drives nonlinearity, potentially causing chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , motion may desynchronize or become chaotic. Transition to Chaos For large \\(F\\) or specific \\(\\omega\\) , the nonlinear \\(\\sin(\\theta)\\) term dominates, leading to unpredictable motion. Chaotic behavior is characterized by sensitivity to initial conditions and aperiodic trajectories, observable in phase space or Poincar\u00e9 sections. 3. Practical Applications Real-World Scenarios Energy Harvesting : Pendulum-based devices capture ambient vibrations. Example : A pendulum in a watch converts wrist motion into energy. Suspension Bridges : Oscillations from wind (forcing) can resonate or destabilize structures. Oscillating Circuits : Electrical analogs mimic pendulum dynamics in signal processing. Adaptations Nonlinear Damping : Replace \\(b \\frac{d \\theta}{dt}\\) with \\(b \\left| \\frac{d \\theta}{dt} \\right| \\frac{d \\theta}{dt}\\) for realistic friction. Variable Forcing : Use \\(F(t)\\) for non-periodic inputs like gusts. 4. Implementation Graphical Outputs Figure 1: Motion vs Time (Resonance Case) Figure 2: Phase Portrait (Chaotic Case) Figure 3: Poincar\u00e9 Section (Transition to Chaos) Python Simulation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint g = 9.81 # m/s\u00b2 L = 1.0 # m omega0 = np.sqrt(g / L) def pendulum_deriv(state, t, b, F, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -b * theta_dot - (g / L) * np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] t = np.linspace(0, 50, 1000) initial_conditions = [0.1, 0] # [theta, theta_dot] # Resonance Case sol_res = odeint(pendulum_deriv, initial_conditions, t, args=(0.1, 0.2, omega0)) plt.figure(figsize=(10, 6)) plt.plot(t, sol_res[:, 0], label='\u03b8(t), b=0.1, F=0.2, \u03c9=\u03c9\u2080') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Motion vs Time (Resonance)') plt.grid(True) plt.legend() plt.show() # Chaotic Case sol_chaos = odeint(pendulum_deriv, initial_conditions, t, args=(0.2, 1.5, 1.2)) plt.figure(figsize=(10, 6)) plt.plot(sol_chaos[:, 0], sol_chaos[:, 1], 'b-', alpha=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait (Chaotic, b=0.2, F=1.5, \u03c9=1.2)') plt.grid(True) plt.show() # Poincar\u00e9 Section poincare_theta = [] poincare_theta_dot = [] for i in range(len(t)): if abs(np.mod(t[i] * 1.2 / (2 * np.pi), 1) - 0) < 0.01: # Sample at driving period poincare_theta.append(sol_chaos[i, 0]) poincare_theta_dot.append(sol_chaos[i, 1]) plt.figure(figsize=(10, 6)) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='r', alpha=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section (Chaotic)') plt.grid(True) plt.show() Code simulates pendulum motion, phase portraits, and Poincar\u00e9 sections. Graphical Interpretation Figure 1 : Shows resonance with large amplitude near \\(\\omega = \\omega_0\\) . Figure 2 : Phase portrait reveals chaotic looping for high \\(F\\) . Figure 3 : Poincar\u00e9 section shows scattered points, indicating chaos. 5. Limitations and Extensions Limitations Linear Approximation : Small-angle solution misses nonlinear effects. Simplified Damping : Assumes constant \\(b\\) , ignoring velocity-dependent friction. Periodic Forcing : Limits chaotic modeling to specific conditions. Suggestions for Improvement Nonlinear Damping : Use \\(b \\left| \\frac{d \\theta}{dt} \\right| \\frac{d \\theta}{dt}\\) . Non-Periodic Forcing : Introduce random \\(F(t)\\) . Bifurcation Analysis : Map transitions with varying \\(F\\) or \\(\\omega\\) . Example Scenarios Energy Harvester on a Bridge : A pendulum ( \\(L = 1\\) m, \\(b = 0.1\\) , \\(F = 0.2\\) , \\(\\omega = \\omega_0\\) ) oscillates due to wind at resonance, yielding \\(A \\approx 0.64\\) rad (~37\u00b0). This motion powers a small generator, but chaotic wind gusts could disrupt efficiency. Suspension Bridge Sway : Wind drives a bridge segment ( \\(b = 0.2\\) , \\(F = 1.5\\) , \\(\\omega = 1.2\\) ) into chaos. Initial \\(\\theta = 0.1\\) rad grows unpredictably, risking structural failure, as seen in phase portraits. Conclusion This investigation reveals the forced damped pendulum\u2019s rich dynamics, from resonance ( \\(A = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}}\\) ) to chaos, driven by \\(b\\) , \\(F\\) , and \\(\\omega\\) . Simulations and visualizations highlight transitions, connecting theory to applications like energy harvesting and structural engineering. Future extensions could explore nonlinear damping or random forcing for broader realism.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"Investigating the Dynamics of a Forced Damped Pendulum","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deriving-the-equations-of-motion","text":"The forced damped pendulum is governed by a second-order nonlinear differential equation that accounts for gravity (restoring force), damping (friction), and an external periodic force. The equation of motion is: \\[\\frac{d^2 \\theta}{dt^2} + b \\frac{d \\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = F \\cos(\\omega t)\\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient \\(g\\) : Gravitational acceleration ( \\(\\mathrm{m/s^2}\\) ) \\(L\\) : Pendulum length (m) \\(F\\) : Driving force amplitude (s \\(^{-2}\\) ) \\(\\omega\\) : Driving frequency (rad/s) \\(t\\) : Time (s)","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to a linear form: \\(\\frac{d^2 \\theta}{dt^2} + b \\frac{d \\theta}{dt} + \\omega_0^2 \\theta = F \\cos(\\omega t)\\) Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. The steady-state solution for this driven, damped harmonic oscillator is: \\(\\theta(t) = A \\cos(\\omega t - \\phi)\\) Where: - Amplitude: \\(A = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}}\\) - Phase: \\(\\phi = \\tan^{-1}\\left(\\frac{b \\omega}{\\omega_0^2 - \\omega^2}\\right)\\)","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) , maximizing amplitude when \\(\\omega = \\sqrt{\\omega_0^2 - \\frac{b^2}{2}}\\) (for underdamped cases, \\(b < 2 \\omega_0\\) ). This amplifies energy transfer from the external force to the pendulum.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#family-of-solutions","text":"The nonlinear equation admits a range of behaviors\u2014periodic, quasiperiodic, and chaotic\u2014depending on \\(b\\) , \\(F\\) , and \\(\\omega\\) . For small \\(F\\) and \\(b\\) , motion is regular; for larger values, chaos emerges, as explored below.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-influence","text":"Damping Coefficient ( \\(b\\) ) : Low \\(b\\) allows sustained oscillations; high \\(b\\) suppresses motion, leading to decay. Driving Amplitude ( \\(F\\) ) : Small \\(F\\) produces linear-like motion; large \\(F\\) drives nonlinearity, potentially causing chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , motion may desynchronize or become chaotic.","title":"Parameter Influence"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For large \\(F\\) or specific \\(\\omega\\) , the nonlinear \\(\\sin(\\theta)\\) term dominates, leading to unpredictable motion. Chaotic behavior is characterized by sensitivity to initial conditions and aperiodic trajectories, observable in phase space or Poincar\u00e9 sections.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#real-world-scenarios","text":"Energy Harvesting : Pendulum-based devices capture ambient vibrations. Example : A pendulum in a watch converts wrist motion into energy. Suspension Bridges : Oscillations from wind (forcing) can resonate or destabilize structures. Oscillating Circuits : Electrical analogs mimic pendulum dynamics in signal processing.","title":"Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#adaptations","text":"Nonlinear Damping : Replace \\(b \\frac{d \\theta}{dt}\\) with \\(b \\left| \\frac{d \\theta}{dt} \\right| \\frac{d \\theta}{dt}\\) for realistic friction. Variable Forcing : Use \\(F(t)\\) for non-periodic inputs like gusts.","title":"Adaptations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-outputs","text":"Figure 1: Motion vs Time (Resonance Case) Figure 2: Phase Portrait (Chaotic Case) Figure 3: Poincar\u00e9 Section (Transition to Chaos)","title":"Graphical Outputs"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint g = 9.81 # m/s\u00b2 L = 1.0 # m omega0 = np.sqrt(g / L) def pendulum_deriv(state, t, b, F, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -b * theta_dot - (g / L) * np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] t = np.linspace(0, 50, 1000) initial_conditions = [0.1, 0] # [theta, theta_dot] # Resonance Case sol_res = odeint(pendulum_deriv, initial_conditions, t, args=(0.1, 0.2, omega0)) plt.figure(figsize=(10, 6)) plt.plot(t, sol_res[:, 0], label='\u03b8(t), b=0.1, F=0.2, \u03c9=\u03c9\u2080') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Motion vs Time (Resonance)') plt.grid(True) plt.legend() plt.show() # Chaotic Case sol_chaos = odeint(pendulum_deriv, initial_conditions, t, args=(0.2, 1.5, 1.2)) plt.figure(figsize=(10, 6)) plt.plot(sol_chaos[:, 0], sol_chaos[:, 1], 'b-', alpha=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait (Chaotic, b=0.2, F=1.5, \u03c9=1.2)') plt.grid(True) plt.show() # Poincar\u00e9 Section poincare_theta = [] poincare_theta_dot = [] for i in range(len(t)): if abs(np.mod(t[i] * 1.2 / (2 * np.pi), 1) - 0) < 0.01: # Sample at driving period poincare_theta.append(sol_chaos[i, 0]) poincare_theta_dot.append(sol_chaos[i, 1]) plt.figure(figsize=(10, 6)) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='r', alpha=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section (Chaotic)') plt.grid(True) plt.show() Code simulates pendulum motion, phase portraits, and Poincar\u00e9 sections.","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-interpretation","text":"Figure 1 : Shows resonance with large amplitude near \\(\\omega = \\omega_0\\) . Figure 2 : Phase portrait reveals chaotic looping for high \\(F\\) . Figure 3 : Poincar\u00e9 section shows scattered points, indicating chaos.","title":"Graphical Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-limitations-and-extensions","text":"","title":"5. Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations","text":"Linear Approximation : Small-angle solution misses nonlinear effects. Simplified Damping : Assumes constant \\(b\\) , ignoring velocity-dependent friction. Periodic Forcing : Limits chaotic modeling to specific conditions.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#suggestions-for-improvement","text":"Nonlinear Damping : Use \\(b \\left| \\frac{d \\theta}{dt} \\right| \\frac{d \\theta}{dt}\\) . Non-Periodic Forcing : Introduce random \\(F(t)\\) . Bifurcation Analysis : Map transitions with varying \\(F\\) or \\(\\omega\\) .","title":"Suggestions for Improvement"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-scenarios","text":"Energy Harvester on a Bridge : A pendulum ( \\(L = 1\\) m, \\(b = 0.1\\) , \\(F = 0.2\\) , \\(\\omega = \\omega_0\\) ) oscillates due to wind at resonance, yielding \\(A \\approx 0.64\\) rad (~37\u00b0). This motion powers a small generator, but chaotic wind gusts could disrupt efficiency. Suspension Bridge Sway : Wind drives a bridge segment ( \\(b = 0.2\\) , \\(F = 1.5\\) , \\(\\omega = 1.2\\) ) into chaos. Initial \\(\\theta = 0.1\\) rad grows unpredictably, risking structural failure, as seen in phase portraits.","title":"Example Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"This investigation reveals the forced damped pendulum\u2019s rich dynamics, from resonance ( \\(A = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}}\\) ) to chaos, driven by \\(b\\) , \\(F\\) , and \\(\\omega\\) . Simulations and visualizations highlight transitions, connecting theory to applications like energy harvesting and structural engineering. Future extensions could explore nonlinear damping or random forcing for broader realism.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 3 Orbital Period and Orbital Radius 1. Theoretical Foundation Deriving Kepler\u2019s Third Law for Circular Orbits Kepler\u2019s Third Law relates the square of the orbital period ( \\(T^2\\) ) to the cube of the orbital radius ( \\(r^3\\) ) for bodies in circular orbits under gravitational influence. Start with Newton\u2019s law of gravitation and centripetal force for a satellite (mass \\(m\\) ) orbiting a central body (mass \\(M\\) ): Gravitational force: \\(F_g = \\frac{G M m}{r^2}\\) Centripetal force required for circular motion: \\(F_c = \\frac{m v^2}{r}\\) Equate these forces: \\(\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\) Cancel \\(m\\) (assuming \\(m \\neq 0\\) ) and simplify: \\(\\frac{G M}{r^2} = \\frac{v^2}{r}\\) Multiply through by \\(r\\) : \\(\\frac{G M}{r} = v^2\\) The orbital velocity \\(v\\) relates to the period \\(T\\) via the circumference: \\(v = \\frac{2\\pi r}{T}\\) . Substitute: \\(\\frac{G M}{r} = \\left(\\frac{2\\pi r}{T}\\right)^2\\) Simplify: \\(\\frac{G M}{r} = \\frac{4\\pi^2 r^2}{T^2}\\) Rearrange: \\(G M = \\frac{4\\pi^2 r^3}{T^2}\\) Solve for \\(T^2\\) : \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This is Kepler\u2019s Third Law for circular orbits, where \\(T^2 \\propto r^3\\) , and the constant \\(\\frac{4\\pi^2}{G M}\\) depends on the central mass \\(M\\) . Implications Mass Determination : If \\(T\\) and \\(r\\) are measured, \\(M\\) can be calculated: \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) . Distance Estimation : Known \\(M\\) and \\(T\\) allow solving for \\(r\\) . 2. Astronomical Implications Kepler\u2019s Third Law enables: - Planetary Masses : Observing satellite orbits (e.g., moons) reveals the parent body\u2019s mass. - Orbital Radii : Period measurements of planets or asteroids refine their distances from the Sun. - System Stability : Predicts stable orbits for artificial satellites. 3. Real-World Examples Moon\u2019s Orbit : \\(r \\approx 384,400\\) km, \\(T \\approx 27.32\\) days. Using \\(M_{\\text{Earth}} \\approx 5.972 \\times 10^{24}\\) kg, the law holds, confirming Earth\u2019s mass. Earth\u2019s Orbit : \\(r \\approx 1\\) AU ( \\(149.6 \\times 10^6\\) km), \\(T = 1\\) year, used historically to define the AU via the Sun\u2019s mass. 4. Implementation Graphical Outputs Figure 1: Circular Orbit Visualization Shows a satellite tracing a circular path around a central body. Figure 2: \\(T^2\\) vs. \\(r^3\\) Relationship Log-log plot of \\(T^2\\) vs. \\(r^3\\) for Solar System planets, showing linearity. Python Simulation import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg (Sun\u2019s mass) M_earth = 5.972e24 # kg def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Figure 1: Circular Orbit t = np.linspace(0, 2 * np.pi, 100) r_moon = 384400e3 # m x = r_moon * np.cos(t) y = r_moon * np.sin(t) plt.figure(figsize=(8, 8)) plt.plot(x, y, 'b-', label='Moon\u2019s Orbit') plt.plot(0, 0, 'yo', label='Earth', markersize=10) plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Circular Orbit Visualization') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('circular_orbit.png') # Save as file plt.show() # Figure 2: T\u00b2 vs r\u00b3 planets = { 'Mercury': (57.9e9, 87.97 * 86400), # r (m), T (s) 'Venus': (108.2e9, 224.7 * 86400), 'Earth': (149.6e9, 365.25 * 86400), 'Mars': (227.9e9, 687 * 86400), 'Jupiter': (778.5e9, 4332.59 * 86400) } r_values = np.array([data[0] for data in planets.values()]) T_values = np.array([data[1] for data in planets.values()]) T2 = T_values**2 r3 = r_values**3 plt.figure(figsize=(10, 6)) plt.loglog(r3, T2, 'bo', label='Planets') r_fit = np.logspace(16, 19, 100) T_fit = (4 * np.pi**2 / (G * M_sun))**(0.5) * r_fit**(1.5) plt.loglog(r_fit, T_fit, 'r--', label='Kepler\u2019s Law') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('T\u00b2 vs r\u00b3 Relationship') plt.grid(True) plt.legend() plt.savefig('kepler_law.png') # Save as file plt.show() # Verification for name, (r, T) in planets.items(): T_calc = orbital_period(r, M_sun) print(f\"{name}: Calculated T = {T_calc/86400:.2f} days, Actual T = {T/86400:.2f} days\") Code simulates orbits and verifies Kepler\u2019s Law, saving figures as circular_orbit.png and kepler_law.png . Graphical Interpretation Figure 1 : Visualizes the Moon\u2019s circular orbit around Earth, emphasizing the radius. Figure 2 : Log-log plot confirms \\(T^2 \\propto r^3\\) for Solar System planets, with a fitted line. 5. Extensions and Limitations Extensions Elliptical Orbits : Kepler\u2019s original law uses semi-major axis \\(a\\) instead of \\(r\\) : \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) . For circular orbits, \\(a = r\\) . Binary Systems : Applies to stars orbiting each other, revealing total system mass. Limitations Circular Assumption : Ignores eccentricity. Single Body : Assumes \\(M \\gg m\\) , neglecting satellite mass. Example Scenarios GPS Satellite : At \\(r = 26,560\\) km, \\(T \\approx 11.97\\) hours. Using \\(M_{\\text{Earth}}\\) , \\(T^2 / r^3 \\approx 1.36 \\times 10^{-14}\\) s\u00b2/m\u00b3 matches theory, ensuring precise timing. Jupiter\u2019s Moons : Io\u2019s \\(r = 421,700\\) km, \\(T = 1.77\\) days yields Jupiter\u2019s mass via \\(M = \\frac{4\\pi^2 r^3}{G T^2} \\approx 1.898 \\times 10^{27}\\) kg, aligning with observations. Conclusion Kepler\u2019s Third Law ( \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) ) elegantly ties orbital period to radius, enabling mass and distance calculations across celestial scales. Simulations and examples like the Moon and planets validate this relationship, with extensions to elliptical orbits broadening its scope. Future work could model eccentric orbits or multi-body systems for deeper insights.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-3","text":"Orbital Period and Orbital Radius","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deriving-keplers-third-law-for-circular-orbits","text":"Kepler\u2019s Third Law relates the square of the orbital period ( \\(T^2\\) ) to the cube of the orbital radius ( \\(r^3\\) ) for bodies in circular orbits under gravitational influence. Start with Newton\u2019s law of gravitation and centripetal force for a satellite (mass \\(m\\) ) orbiting a central body (mass \\(M\\) ): Gravitational force: \\(F_g = \\frac{G M m}{r^2}\\) Centripetal force required for circular motion: \\(F_c = \\frac{m v^2}{r}\\) Equate these forces: \\(\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\) Cancel \\(m\\) (assuming \\(m \\neq 0\\) ) and simplify: \\(\\frac{G M}{r^2} = \\frac{v^2}{r}\\) Multiply through by \\(r\\) : \\(\\frac{G M}{r} = v^2\\) The orbital velocity \\(v\\) relates to the period \\(T\\) via the circumference: \\(v = \\frac{2\\pi r}{T}\\) . Substitute: \\(\\frac{G M}{r} = \\left(\\frac{2\\pi r}{T}\\right)^2\\) Simplify: \\(\\frac{G M}{r} = \\frac{4\\pi^2 r^2}{T^2}\\) Rearrange: \\(G M = \\frac{4\\pi^2 r^3}{T^2}\\) Solve for \\(T^2\\) : \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This is Kepler\u2019s Third Law for circular orbits, where \\(T^2 \\propto r^3\\) , and the constant \\(\\frac{4\\pi^2}{G M}\\) depends on the central mass \\(M\\) .","title":"Deriving Kepler\u2019s Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications","text":"Mass Determination : If \\(T\\) and \\(r\\) are measured, \\(M\\) can be calculated: \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) . Distance Estimation : Known \\(M\\) and \\(T\\) allow solving for \\(r\\) .","title":"Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-astronomical-implications","text":"Kepler\u2019s Third Law enables: - Planetary Masses : Observing satellite orbits (e.g., moons) reveals the parent body\u2019s mass. - Orbital Radii : Period measurements of planets or asteroids refine their distances from the Sun. - System Stability : Predicts stable orbits for artificial satellites.","title":"2. Astronomical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"Moon\u2019s Orbit : \\(r \\approx 384,400\\) km, \\(T \\approx 27.32\\) days. Using \\(M_{\\text{Earth}} \\approx 5.972 \\times 10^{24}\\) kg, the law holds, confirming Earth\u2019s mass. Earth\u2019s Orbit : \\(r \\approx 1\\) AU ( \\(149.6 \\times 10^6\\) km), \\(T = 1\\) year, used historically to define the AU via the Sun\u2019s mass.","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphical-outputs","text":"Figure 1: Circular Orbit Visualization Shows a satellite tracing a circular path around a central body. Figure 2: \\(T^2\\) vs. \\(r^3\\) Relationship Log-log plot of \\(T^2\\) vs. \\(r^3\\) for Solar System planets, showing linearity.","title":"Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg (Sun\u2019s mass) M_earth = 5.972e24 # kg def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Figure 1: Circular Orbit t = np.linspace(0, 2 * np.pi, 100) r_moon = 384400e3 # m x = r_moon * np.cos(t) y = r_moon * np.sin(t) plt.figure(figsize=(8, 8)) plt.plot(x, y, 'b-', label='Moon\u2019s Orbit') plt.plot(0, 0, 'yo', label='Earth', markersize=10) plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Circular Orbit Visualization') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('circular_orbit.png') # Save as file plt.show() # Figure 2: T\u00b2 vs r\u00b3 planets = { 'Mercury': (57.9e9, 87.97 * 86400), # r (m), T (s) 'Venus': (108.2e9, 224.7 * 86400), 'Earth': (149.6e9, 365.25 * 86400), 'Mars': (227.9e9, 687 * 86400), 'Jupiter': (778.5e9, 4332.59 * 86400) } r_values = np.array([data[0] for data in planets.values()]) T_values = np.array([data[1] for data in planets.values()]) T2 = T_values**2 r3 = r_values**3 plt.figure(figsize=(10, 6)) plt.loglog(r3, T2, 'bo', label='Planets') r_fit = np.logspace(16, 19, 100) T_fit = (4 * np.pi**2 / (G * M_sun))**(0.5) * r_fit**(1.5) plt.loglog(r_fit, T_fit, 'r--', label='Kepler\u2019s Law') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('T\u00b2 vs r\u00b3 Relationship') plt.grid(True) plt.legend() plt.savefig('kepler_law.png') # Save as file plt.show() # Verification for name, (r, T) in planets.items(): T_calc = orbital_period(r, M_sun) print(f\"{name}: Calculated T = {T_calc/86400:.2f} days, Actual T = {T/86400:.2f} days\") Code simulates orbits and verifies Kepler\u2019s Law, saving figures as circular_orbit.png and kepler_law.png .","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphical-interpretation","text":"Figure 1 : Visualizes the Moon\u2019s circular orbit around Earth, emphasizing the radius. Figure 2 : Log-log plot confirms \\(T^2 \\propto r^3\\) for Solar System planets, with a fitted line.","title":"Graphical Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extensions-and-limitations","text":"","title":"5. Extensions and Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extensions","text":"Elliptical Orbits : Kepler\u2019s original law uses semi-major axis \\(a\\) instead of \\(r\\) : \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) . For circular orbits, \\(a = r\\) . Binary Systems : Applies to stars orbiting each other, revealing total system mass.","title":"Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#limitations","text":"Circular Assumption : Ignores eccentricity. Single Body : Assumes \\(M \\gg m\\) , neglecting satellite mass.","title":"Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-scenarios","text":"GPS Satellite : At \\(r = 26,560\\) km, \\(T \\approx 11.97\\) hours. Using \\(M_{\\text{Earth}}\\) , \\(T^2 / r^3 \\approx 1.36 \\times 10^{-14}\\) s\u00b2/m\u00b3 matches theory, ensuring precise timing. Jupiter\u2019s Moons : Io\u2019s \\(r = 421,700\\) km, \\(T = 1.77\\) days yields Jupiter\u2019s mass via \\(M = \\frac{4\\pi^2 r^3}{G T^2} \\approx 1.898 \\times 10^{27}\\) kg, aligning with observations.","title":"Example Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s Third Law ( \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) ) elegantly ties orbital period to radius, enabling mass and distance calculations across celestial scales. Simulations and examples like the Moon and planets validate this relationship, with extensions to elliptical orbits broadening its scope. Future work could model eccentric orbits or multi-body systems for deeper insights.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 4 Escape Velocities and Cosmic Velocities 1. Theoretical Foundation Definitions and Derivations Cosmic velocities describe critical speeds for overcoming gravitational potentials in space: First Cosmic Velocity ( \\(v_1\\) ) : Orbital velocity for a circular orbit near a body\u2019s surface. Second Cosmic Velocity ( \\(v_2\\) ) : Escape velocity to leave a body\u2019s gravitational influence. Third Cosmic Velocity ( \\(v_3\\) ) : Velocity to escape a star system (e.g., Solar System) from a planet\u2019s surface. First Cosmic Velocity ( \\(v_1\\) ) For a circular orbit at radius \\(r\\) (approximately the body\u2019s radius \\(R\\) for surface orbits), gravitational force equals centripetal force: \\(\\frac{G M m}{r^2} = \\frac{m v_1^2}{r}\\) Cancel \\(m\\) and solve: \\(v_1^2 = \\frac{G M}{r}\\) \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) For surface orbits, \\(r = R\\) . Second Cosmic Velocity ( \\(v_2\\) ) Escape velocity is derived from conservation of energy, where kinetic energy equals gravitational potential energy at infinity: \\(\\frac{1}{2} m v_2^2 = \\frac{G M m}{r}\\) Cancel \\(m\\) and solve: \\(v_2^2 = \\frac{2 G M}{r}\\) \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) At the surface, \\(r = R\\) , and \\(v_2 = \\sqrt{2} \\cdot v_1\\) . Third Cosmic Velocity ( \\(v_3\\) ) Velocity to escape the Sun\u2019s gravity from a planet\u2019s surface, starting at distance \\(r_p\\) from the Sun. Total energy must reach zero at infinity: \\(\\frac{1}{2} m v_3^2 - \\frac{G M_{\\text{sun}} m}{r_p} - \\frac{G M m}{r} = 0\\) Solve: \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) For Earth, \\(r = R_{\\text{earth}}\\) , \\(r_p = 1\\) AU. Parameters \\(G\\) : Gravitational constant \\(M\\) : Mass of the celestial body \\(r\\) : Radius (or distance from center) \\(M_{\\text{sun}}\\) : Sun\u2019s mass \\(r_p\\) : Planet\u2019s distance from the Sun 2. Analysis of Parameters Mass ( \\(M\\) ) : Higher \\(M\\) increases all velocities. Radius ( \\(r\\) ) : Larger \\(r\\) decreases velocities. Solar Distance ( \\(r_p\\) ) : Affects \\(v_3\\) , with closer orbits requiring higher speeds. 3. Calculations for Celestial Bodies Earth : \\(M = 5.972 \\times 10^{24}\\) kg, \\(R = 6,371\\) km, \\(r_p = 1\\) AU \\(v_1 = 7.91\\) km/s \\(v_2 = 11.19\\) km/s \\(v_3 \\approx 42.1\\) km/s Mars : \\(M = 6.417 \\times 10^{23}\\) kg, \\(R = 3,390\\) km, \\(r_p = 1.524\\) AU \\(v_1 = 3.55\\) km/s \\(v_2 = 5.03\\) km/s \\(v_3 \\approx 34.7\\) km/s Jupiter : \\(M = 1.898 \\times 10^{27}\\) kg, \\(R = 69,911\\) km, \\(r_p = 5.2\\) AU \\(v_1 = 42.1\\) km/s \\(v_2 = 59.5\\) km/s \\(v_3 \\approx 61.0\\) km/s 4. Implementation Graphical Outputs Figure 1: Cosmic Velocities Comparison Bar chart comparing \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) for Earth, Mars, and Jupiter, as shown in the generated plot. Python Simulation import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg AU = 149.6e9 # m bodies = { 'Earth': {'M': 5.972e24, 'R': 6371e3, 'r_p': 1 * AU}, 'Mars': {'M': 6.417e23, 'R': 3390e3, 'r_p': 1.524 * AU}, 'Jupiter': {'M': 1.898e27, 'R': 69911e3, 'r_p': 5.2 * AU} } def v1(M, r): return np.sqrt(G * M / r) / 1000 # km/s def v2(M, r): return np.sqrt(2 * G * M / r) / 1000 # km/s def v3(M, r, M_sun, r_p): return np.sqrt((2 * G * M / r) + (2 * G * M_sun / r_p)) / 1000 # km/s # Calculate velocities velocities = {body: [v1(data['M'], data['R']), v2(data['M'], data['R']), v3(data['M'], data['R'], M_sun, data['r_p'])] for body, data in bodies.items()} # Figure 1: Bar Chart labels = ['v\u2081 (Orbit)', 'v\u2082 (Escape)', 'v\u2083 (Solar Escape)'] x = np.arange(len(labels)) width = 0.2 plt.figure(figsize=(10, 6)) for i, (body, vels) in enumerate(velocities.items()): plt.bar(x + i * width, vels, width, label=body) plt.xlabel('Velocity Type') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.xticks(x + width, labels) plt.legend() plt.grid(True, alpha=0.3) plt.savefig('cosmic_velocities.png') plt.show() # Print results for body, vels in velocities.items(): print(f\"{body}: v\u2081 = {vels[0]:.2f} km/s, v\u2082 = {vels[1]:.2f} km/s, v\u2083 = {vels[2]:.2f} km/s\") Code calculates and visualizes cosmic velocities, saving the bar chart as cosmic_velocities.png . Graphical Interpretation Figure 1 : Bar chart contrasts \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) across Earth, Mars, and Jupiter, highlighting scale differences. Jupiter\u2019s velocities are significantly higher due to its mass, while Mars has the lowest due to its smaller size and mass. 5. Importance in Space Exploration Satellites : \\(v_1\\) ensures low Earth orbit (e.g., 7.91 km/s for Earth). Planetary Missions : \\(v_2\\) enables escape (e.g., 11.19 km/s for Mars missions). Interstellar Travel : \\(v_3\\) sets the threshold for leaving the Solar System (e.g., Voyager 1 exceeded 42.1 km/s with boosts). Example Scenarios Mars Rover Launch : Requires \\(v_2 = 5.03\\) km/s to escape Mars, achievable with current rockets, enabling sample return missions. Jupiter Probe : A probe needs \\(v_3 \\approx 61\\) km/s from Jupiter\u2019s surface to exit the Solar System, illustrating the challenge of gas giant missions. Conclusion The cosmic velocities\u2014 \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) , \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) , and \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) \u2014define thresholds for orbiting, escaping, and leaving star systems. Calculations and visualizations for Earth, Mars, and Jupiter underscore their role in space exploration, from satellite launches to interstellar aspirations. Future models could include atmospheric drag or multi-body effects.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-4","text":"Escape Velocities and Cosmic Velocities","title":"Problem 4"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-and-derivations","text":"Cosmic velocities describe critical speeds for overcoming gravitational potentials in space: First Cosmic Velocity ( \\(v_1\\) ) : Orbital velocity for a circular orbit near a body\u2019s surface. Second Cosmic Velocity ( \\(v_2\\) ) : Escape velocity to leave a body\u2019s gravitational influence. Third Cosmic Velocity ( \\(v_3\\) ) : Velocity to escape a star system (e.g., Solar System) from a planet\u2019s surface.","title":"Definitions and Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-v_1","text":"For a circular orbit at radius \\(r\\) (approximately the body\u2019s radius \\(R\\) for surface orbits), gravitational force equals centripetal force: \\(\\frac{G M m}{r^2} = \\frac{m v_1^2}{r}\\) Cancel \\(m\\) and solve: \\(v_1^2 = \\frac{G M}{r}\\) \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) For surface orbits, \\(r = R\\) .","title":"First Cosmic Velocity (\\(v_1\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-v_2","text":"Escape velocity is derived from conservation of energy, where kinetic energy equals gravitational potential energy at infinity: \\(\\frac{1}{2} m v_2^2 = \\frac{G M m}{r}\\) Cancel \\(m\\) and solve: \\(v_2^2 = \\frac{2 G M}{r}\\) \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) At the surface, \\(r = R\\) , and \\(v_2 = \\sqrt{2} \\cdot v_1\\) .","title":"Second Cosmic Velocity (\\(v_2\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-v_3","text":"Velocity to escape the Sun\u2019s gravity from a planet\u2019s surface, starting at distance \\(r_p\\) from the Sun. Total energy must reach zero at infinity: \\(\\frac{1}{2} m v_3^2 - \\frac{G M_{\\text{sun}} m}{r_p} - \\frac{G M m}{r} = 0\\) Solve: \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) For Earth, \\(r = R_{\\text{earth}}\\) , \\(r_p = 1\\) AU.","title":"Third Cosmic Velocity (\\(v_3\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameters","text":"\\(G\\) : Gravitational constant \\(M\\) : Mass of the celestial body \\(r\\) : Radius (or distance from center) \\(M_{\\text{sun}}\\) : Sun\u2019s mass \\(r_p\\) : Planet\u2019s distance from the Sun","title":"Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-analysis-of-parameters","text":"Mass ( \\(M\\) ) : Higher \\(M\\) increases all velocities. Radius ( \\(r\\) ) : Larger \\(r\\) decreases velocities. Solar Distance ( \\(r_p\\) ) : Affects \\(v_3\\) , with closer orbits requiring higher speeds.","title":"2. Analysis of Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-calculations-for-celestial-bodies","text":"Earth : \\(M = 5.972 \\times 10^{24}\\) kg, \\(R = 6,371\\) km, \\(r_p = 1\\) AU \\(v_1 = 7.91\\) km/s \\(v_2 = 11.19\\) km/s \\(v_3 \\approx 42.1\\) km/s Mars : \\(M = 6.417 \\times 10^{23}\\) kg, \\(R = 3,390\\) km, \\(r_p = 1.524\\) AU \\(v_1 = 3.55\\) km/s \\(v_2 = 5.03\\) km/s \\(v_3 \\approx 34.7\\) km/s Jupiter : \\(M = 1.898 \\times 10^{27}\\) kg, \\(R = 69,911\\) km, \\(r_p = 5.2\\) AU \\(v_1 = 42.1\\) km/s \\(v_2 = 59.5\\) km/s \\(v_3 \\approx 61.0\\) km/s","title":"3. Calculations for Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#graphical-outputs","text":"Figure 1: Cosmic Velocities Comparison Bar chart comparing \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) for Earth, Mars, and Jupiter, as shown in the generated plot.","title":"Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg AU = 149.6e9 # m bodies = { 'Earth': {'M': 5.972e24, 'R': 6371e3, 'r_p': 1 * AU}, 'Mars': {'M': 6.417e23, 'R': 3390e3, 'r_p': 1.524 * AU}, 'Jupiter': {'M': 1.898e27, 'R': 69911e3, 'r_p': 5.2 * AU} } def v1(M, r): return np.sqrt(G * M / r) / 1000 # km/s def v2(M, r): return np.sqrt(2 * G * M / r) / 1000 # km/s def v3(M, r, M_sun, r_p): return np.sqrt((2 * G * M / r) + (2 * G * M_sun / r_p)) / 1000 # km/s # Calculate velocities velocities = {body: [v1(data['M'], data['R']), v2(data['M'], data['R']), v3(data['M'], data['R'], M_sun, data['r_p'])] for body, data in bodies.items()} # Figure 1: Bar Chart labels = ['v\u2081 (Orbit)', 'v\u2082 (Escape)', 'v\u2083 (Solar Escape)'] x = np.arange(len(labels)) width = 0.2 plt.figure(figsize=(10, 6)) for i, (body, vels) in enumerate(velocities.items()): plt.bar(x + i * width, vels, width, label=body) plt.xlabel('Velocity Type') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.xticks(x + width, labels) plt.legend() plt.grid(True, alpha=0.3) plt.savefig('cosmic_velocities.png') plt.show() # Print results for body, vels in velocities.items(): print(f\"{body}: v\u2081 = {vels[0]:.2f} km/s, v\u2082 = {vels[1]:.2f} km/s, v\u2083 = {vels[2]:.2f} km/s\") Code calculates and visualizes cosmic velocities, saving the bar chart as cosmic_velocities.png .","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#graphical-interpretation","text":"Figure 1 : Bar chart contrasts \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) across Earth, Mars, and Jupiter, highlighting scale differences. Jupiter\u2019s velocities are significantly higher due to its mass, while Mars has the lowest due to its smaller size and mass.","title":"Graphical Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-importance-in-space-exploration","text":"Satellites : \\(v_1\\) ensures low Earth orbit (e.g., 7.91 km/s for Earth). Planetary Missions : \\(v_2\\) enables escape (e.g., 11.19 km/s for Mars missions). Interstellar Travel : \\(v_3\\) sets the threshold for leaving the Solar System (e.g., Voyager 1 exceeded 42.1 km/s with boosts).","title":"5. Importance in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-scenarios","text":"Mars Rover Launch : Requires \\(v_2 = 5.03\\) km/s to escape Mars, achievable with current rockets, enabling sample return missions. Jupiter Probe : A probe needs \\(v_3 \\approx 61\\) km/s from Jupiter\u2019s surface to exit the Solar System, illustrating the challenge of gas giant missions.","title":"Example Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_2/#conclusion","text":"The cosmic velocities\u2014 \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) , \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) , and \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) \u2014define thresholds for orbiting, escaping, and leaving star systems. Calculations and visualizations for Earth, Mars, and Jupiter underscore their role in space exploration, from satellite launches to interstellar aspirations. Future models could include atmospheric drag or multi-body effects.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth 1. Theoretical Foundation Analyzing Possible Trajectories When a payload is released from a moving rocket near Earth, its trajectory depends on its specific energy, determined by its initial position and velocity. Using Newton\u2019s law of gravitation, the force on the payload (mass \\(m\\) ) due to Earth (mass \\(M\\) ) is: \\(F = \\frac{G M m}{r^2}\\) The specific mechanical energy \\(\\epsilon\\) of the payload determines its trajectory: \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) Where \\(v\\) is the payload\u2019s velocity, \\(r\\) is its distance from Earth\u2019s center, \\(G\\) is the gravitational constant, and \\(M\\) is Earth\u2019s mass. The trajectory type is classified as: Elliptical : \\(\\epsilon < 0\\) (bound orbit, e.g., satellite deployment). Parabolic : \\(\\epsilon = 0\\) (escape trajectory at critical velocity). Hyperbolic : \\(\\epsilon > 0\\) (escape with excess velocity). The eccentricity \\(e\\) further defines the orbit: \\(e = \\sqrt{1 + \\frac{2 \\epsilon h^2}{(G M)^2}}\\) Where \\(h = r v \\cos\\phi\\) is the specific angular momentum, and \\(\\phi\\) is the angle between the velocity vector and the radial direction. For \\(e < 1\\) (elliptical), \\(e = 1\\) (parabolic), \\(e > 1\\) (hyperbolic). Equations of Motion In Cartesian coordinates, the acceleration due to gravity is: \\(\\frac{d^2 x}{dt^2} = -\\frac{G M x}{r^3}, \\quad \\frac{d^2 y}{dt^2} = -\\frac{G M y}{r^3}\\) Where \\(r = \\sqrt{x^2 + y^2}\\) . These equations are solved numerically given initial conditions (position, velocity, altitude). 2. Numerical Analysis Consider a payload released at altitude \\(h = 500\\) km ( \\(r = R_{\\text{earth}} + h = 6,871\\) km), with initial velocity \\(v_0\\) at angle \\(\\phi\\) relative to the radial direction. Earth\u2019s parameters: \\(M = 5.972 \\times 10^{24}\\) kg, \\(R_{\\text{earth}} = 6,371\\) km, \\(G = 6.67430 \\times 10^{-11}\\) m\u00b3 kg\u207b\u00b9 s\u207b\u00b2. Escape Velocity : \\(v_{\\text{esc}} = \\sqrt{\\frac{2 G M}{r}} \\approx 10.9\\) km/s at \\(h = 500\\) km. Circular Orbit Velocity : \\(v_{\\text{circ}} = \\sqrt{\\frac{G M}{r}} \\approx 7.7\\) km/s. Test cases: - \\(v_0 = 7.5\\) km/s, \\(\\phi = 90^\\circ\\) : Slightly below circular velocity, expect an elliptical orbit. - \\(v_0 = 10.9\\) km/s, \\(\\phi = 90^\\circ\\) : Parabolic trajectory. - \\(v_0 = 12.0\\) km/s, \\(\\phi = 90^\\circ\\) : Hyperbolic trajectory. 3. Applications to Space Missions Orbital Insertion : \\(v_0 \\approx v_{\\text{circ}}\\) places the payload in a stable orbit (e.g., satellite deployment). Reentry : Low \\(v_0\\) leads to an elliptical orbit intersecting Earth, simulating reentry. Escape : \\(v_0 \\geq v_{\\text{esc}}\\) allows escape, relevant for interplanetary missions. 4. Implementation Graphical Outputs Figure 1: Payload Trajectories Near Earth Plots elliptical, parabolic, and hyperbolic trajectories with Earth at the origin, as shown in the generated plot. Python Simulation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M = 5.972e24 # kg (Earth\u2019s mass) R_earth = 6371e3 # m def deriv(state, t): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 return [vx, vy, ax, ay] # Initial conditions h = 500e3 # Altitude (m) r0 = R_earth + h t = np.linspace(0, 3600, 1000) # 1 hour # Velocities for different trajectories v_circ = np.sqrt(G * M / r0) # Circular velocity v_esc = np.sqrt(2 * G * M / r0) # Escape velocity cases = [ ('Elliptical', 0.975 * v_circ, 'b'), # Below circular ('Parabolic', v_esc, 'g'), # At escape ('Hyperbolic', 1.1 * v_esc, 'r') # Above escape ] plt.figure(figsize=(10, 10)) for label, v0, color in cases: state0 = [r0, 0, 0, v0] # Start at (r0, 0) with velocity in y-direction sol = odeint(deriv, state0, t) plt.plot(sol[:, 0], sol[:, 1], color, label=label) # Plot Earth theta = np.linspace(0, 2 * np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k-', label='Earth') plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Payload Trajectories Near Earth') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('payload_trajectories.png') plt.show() Code simulates and visualizes payload trajectories, saving the plot as payload_trajectories.png . Graphical Interpretation Figure 1 : Displays three trajectories starting at an altitude of 500 km: Elliptical (blue) : The payload loops back toward Earth, forming a closed orbit with perigee closer to Earth. Parabolic (green) : The payload just escapes, following a path that asymptotically approaches infinity. Hyperbolic (red) : The payload escapes with excess speed, following a sharply diverging trajectory away from Earth. 5. Limitations and Extensions Limitations No Drag : Ignores atmospheric effects at low altitudes. Simplified Gravity : Assumes point-mass Earth, neglecting oblateness. Example Scenarios Satellite Deployment : At \\(v_0 = 7.5\\) km/s, the payload enters an elliptical orbit, ideal for a communication satellite. Lunar Mission : At \\(v_0 = 12\\) km/s, a hyperbolic trajectory ensures escape toward the Moon. Conclusion The payload\u2019s trajectory\u2014elliptical ( \\(\\epsilon < 0\\) ), parabolic ( \\(\\epsilon = 0\\) ), or hyperbolic ( \\(\\epsilon > 0\\) )\u2014depends on its specific energy \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) . Numerical simulations reveal these paths, supporting applications like satellite deployment and lunar missions. Future work could include drag or multi-body effects for realism.","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"Trajectories of a Freely Released Payload Near Earth","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#analyzing-possible-trajectories","text":"When a payload is released from a moving rocket near Earth, its trajectory depends on its specific energy, determined by its initial position and velocity. Using Newton\u2019s law of gravitation, the force on the payload (mass \\(m\\) ) due to Earth (mass \\(M\\) ) is: \\(F = \\frac{G M m}{r^2}\\) The specific mechanical energy \\(\\epsilon\\) of the payload determines its trajectory: \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) Where \\(v\\) is the payload\u2019s velocity, \\(r\\) is its distance from Earth\u2019s center, \\(G\\) is the gravitational constant, and \\(M\\) is Earth\u2019s mass. The trajectory type is classified as: Elliptical : \\(\\epsilon < 0\\) (bound orbit, e.g., satellite deployment). Parabolic : \\(\\epsilon = 0\\) (escape trajectory at critical velocity). Hyperbolic : \\(\\epsilon > 0\\) (escape with excess velocity). The eccentricity \\(e\\) further defines the orbit: \\(e = \\sqrt{1 + \\frac{2 \\epsilon h^2}{(G M)^2}}\\) Where \\(h = r v \\cos\\phi\\) is the specific angular momentum, and \\(\\phi\\) is the angle between the velocity vector and the radial direction. For \\(e < 1\\) (elliptical), \\(e = 1\\) (parabolic), \\(e > 1\\) (hyperbolic).","title":"Analyzing Possible Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion","text":"In Cartesian coordinates, the acceleration due to gravity is: \\(\\frac{d^2 x}{dt^2} = -\\frac{G M x}{r^3}, \\quad \\frac{d^2 y}{dt^2} = -\\frac{G M y}{r^3}\\) Where \\(r = \\sqrt{x^2 + y^2}\\) . These equations are solved numerically given initial conditions (position, velocity, altitude).","title":"Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-numerical-analysis","text":"Consider a payload released at altitude \\(h = 500\\) km ( \\(r = R_{\\text{earth}} + h = 6,871\\) km), with initial velocity \\(v_0\\) at angle \\(\\phi\\) relative to the radial direction. Earth\u2019s parameters: \\(M = 5.972 \\times 10^{24}\\) kg, \\(R_{\\text{earth}} = 6,371\\) km, \\(G = 6.67430 \\times 10^{-11}\\) m\u00b3 kg\u207b\u00b9 s\u207b\u00b2. Escape Velocity : \\(v_{\\text{esc}} = \\sqrt{\\frac{2 G M}{r}} \\approx 10.9\\) km/s at \\(h = 500\\) km. Circular Orbit Velocity : \\(v_{\\text{circ}} = \\sqrt{\\frac{G M}{r}} \\approx 7.7\\) km/s. Test cases: - \\(v_0 = 7.5\\) km/s, \\(\\phi = 90^\\circ\\) : Slightly below circular velocity, expect an elliptical orbit. - \\(v_0 = 10.9\\) km/s, \\(\\phi = 90^\\circ\\) : Parabolic trajectory. - \\(v_0 = 12.0\\) km/s, \\(\\phi = 90^\\circ\\) : Hyperbolic trajectory.","title":"2. Numerical Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-applications-to-space-missions","text":"Orbital Insertion : \\(v_0 \\approx v_{\\text{circ}}\\) places the payload in a stable orbit (e.g., satellite deployment). Reentry : Low \\(v_0\\) leads to an elliptical orbit intersecting Earth, simulating reentry. Escape : \\(v_0 \\geq v_{\\text{esc}}\\) allows escape, relevant for interplanetary missions.","title":"3. Applications to Space Missions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#graphical-outputs","text":"Figure 1: Payload Trajectories Near Earth Plots elliptical, parabolic, and hyperbolic trajectories with Earth at the origin, as shown in the generated plot.","title":"Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M = 5.972e24 # kg (Earth\u2019s mass) R_earth = 6371e3 # m def deriv(state, t): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 return [vx, vy, ax, ay] # Initial conditions h = 500e3 # Altitude (m) r0 = R_earth + h t = np.linspace(0, 3600, 1000) # 1 hour # Velocities for different trajectories v_circ = np.sqrt(G * M / r0) # Circular velocity v_esc = np.sqrt(2 * G * M / r0) # Escape velocity cases = [ ('Elliptical', 0.975 * v_circ, 'b'), # Below circular ('Parabolic', v_esc, 'g'), # At escape ('Hyperbolic', 1.1 * v_esc, 'r') # Above escape ] plt.figure(figsize=(10, 10)) for label, v0, color in cases: state0 = [r0, 0, 0, v0] # Start at (r0, 0) with velocity in y-direction sol = odeint(deriv, state0, t) plt.plot(sol[:, 0], sol[:, 1], color, label=label) # Plot Earth theta = np.linspace(0, 2 * np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k-', label='Earth') plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Payload Trajectories Near Earth') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('payload_trajectories.png') plt.show() Code simulates and visualizes payload trajectories, saving the plot as payload_trajectories.png .","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#graphical-interpretation","text":"Figure 1 : Displays three trajectories starting at an altitude of 500 km: Elliptical (blue) : The payload loops back toward Earth, forming a closed orbit with perigee closer to Earth. Parabolic (green) : The payload just escapes, following a path that asymptotically approaches infinity. Hyperbolic (red) : The payload escapes with excess speed, following a sharply diverging trajectory away from Earth.","title":"Graphical Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#5-limitations-and-extensions","text":"","title":"5. Limitations and Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#limitations","text":"No Drag : Ignores atmospheric effects at low altitudes. Simplified Gravity : Assumes point-mass Earth, neglecting oblateness.","title":"Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#example-scenarios","text":"Satellite Deployment : At \\(v_0 = 7.5\\) km/s, the payload enters an elliptical orbit, ideal for a communication satellite. Lunar Mission : At \\(v_0 = 12\\) km/s, a hyperbolic trajectory ensures escape toward the Moon.","title":"Example Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_3/#conclusion","text":"The payload\u2019s trajectory\u2014elliptical ( \\(\\epsilon < 0\\) ), parabolic ( \\(\\epsilon = 0\\) ), or hyperbolic ( \\(\\epsilon > 0\\) )\u2014depends on its specific energy \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) . Numerical simulations reveal these paths, supporting applications like satellite deployment and lunar missions. Future work could include drag or multi-body effects for realism.","title":"Conclusion"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Interference Patterns on a Water Surface Motivation Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be observed when ripples from different points meet, forming distinctive interference patterns. These patterns show how waves combine, either reinforcing each other (constructive interference) or canceling out (destructive interference). Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore concepts like the relationship between wave phase and the effects of multiple sources. This task offers a hands-on approach to learning about wave interactions and their real-world applications, making it an interesting and engaging way to dive into wave physics. Task We need to analyze the interference patterns formed on a water surface due to the superposition of waves emitted from point sources placed at the vertices of a regular polygon. The wave from a single source at position \\((x_i, y_i)\\) is given by: \\[ \\eta_i(x, y, t) = A \\cos(k r_i - \\omega t + \\phi_i) \\] where: - \\(\\eta_i(x, y, t)\\) : Displacement at point \\((x, y)\\) at time \\(t\\) . - \\(A\\) : Amplitude. - \\(k = \\frac{2\\pi}{\\lambda}\\) : Wave number, with \\(\\lambda\\) as the wavelength. - \\(r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) : Distance from the source to point \\((x, y)\\) . - \\(\\omega = 2\\pi f\\) : Angular frequency, with \\(f\\) as the frequency. - \\(\\phi_i\\) : Initial phase. Steps to Follow Select a Regular Polygon : We\u2019ll analyze four polygons: triangle, square, pentagon, and hexagon. Position the Sources : Place point sources at the vertices of each polygon. Wave Equations : Write the wave equations for each source. Superposition of Waves : Sum the displacements: $$ \\eta(x, y, t) = \\sum_{i=1}^N \\eta_i(x, y, t) $$ where \\(N\\) is the number of sources. Analyze Interference Patterns : Identify constructive and destructive interference regions. Visualization : Use the provided images for visualization: triangle_only.png (triangle interference pattern), square_only.png (square interference pattern), pentagon_only.png (pentagon interference pattern), and hexagon_only.png (hexagon interference pattern). Assumptions All sources emit waves with the same amplitude \\(A\\) , wavelength \\(\\lambda\\) , and frequency \\(f\\) . The waves are coherent (constant phase difference, \\(\\phi_i = 0\\) ). We\u2019ll use the provided images for visualization. Analysis for Each Polygon Detailed Analysis 1. Equilateral Triangle (3 Sources) Position the Sources For an equilateral triangle centered at the origin with side length \\(s = 2\\) (radius to vertex \\(\\approx 1\\) ): - Vertex 1: \\((0, 1)\\) - Vertex 2: \\((-\\sqrt{3}/2, -1/2) \\approx (-0.866, -0.5)\\) - Vertex 3: \\((\\sqrt{3}/2, -1/2) \\approx (0.866, -0.5)\\) Wave Equations For each source: - Source 1 at \\((0, 1)\\) : $$ r_1 = \\sqrt{(x - 0)^2 + (y - 1)^2} $$ $$ \\eta_1(x, y, t) = A \\cos(k r_1 - \\omega t) $$ - Source 2 at \\((-0.866, -0.5)\\) : $$ r_2 = \\sqrt{(x + 0.866)^2 + (y + 0.5)^2} $$ $$ \\eta_2(x, y, t) = A \\cos(k r_2 - \\omega t) $$ - Source 3 at \\((0.866, -0.5)\\) : $$ r_3 = \\sqrt{(x - 0.866)^2 + (y + 0.5)^2} $$ $$ \\eta_3(x, y, t) = A \\cos(k r_3 - \\omega t) $$ Superposition The total wave displacement at any point is the sum of individual contributions: $$ \\eta(x, y, t) = A \\left[ \\cos(k r_1 - \\omega t) + \\cos(k r_2 - \\omega t) + \\cos(k r_3 - \\omega t) \\right] $$ If all sources are in phase (i.e., \\(\\phi_i = 0\\) ), constructive interference occurs where the path differences are integer multiples of the wavelength: $$ \\Delta r = n\\lambda, \\quad n \\in \\mathbb{Z} $$ Destructive interference occurs when the path differences are half-integer multiples: $$ \\Delta r = \\left(n + \\frac{1}{2}\\right)\\lambda $$ Visualization Here is the interference pattern for the triangle: Analysis Constructive Interference : In triangle_only.png , the yellow regions (displacement up to 2.64) indicate where the waves add up, such as near the center where the path lengths from all sources are nearly equal. Destructive Interference : Blue regions (displacement down to -2.64) show cancellation, forming a pattern with 3-fold symmetry. The pattern resembles a series of concentric nodes and antinodes, with a hexagonal-like structure reflecting the triangular arrangement. Source markers are not present in this image, but the symmetry indicates the sources are at the vertices of an equilateral triangle. 2. Square (4 Sources) Position the Sources For a square centered at the origin with side length 2: - Source 1: \\((1, 1)\\) - Source 2: \\((1, -1)\\) - Source 3: \\((-1, -1)\\) - Source 4: \\((-1, 1)\\) Wave Equations Source 1: $$ r_1 = \\sqrt{(x - 1)^2 + (y - 1)^2} $$ $$ \\eta_1(x, y, t) = A \\cos(k r_1 - \\omega t) $$ Source 2: $$ r_2 = \\sqrt{(x - 1)^2 + (y + 1)^2} $$ $$ \\eta_2(x, y, t) = A \\cos(k r_2 - \\omega t) $$ Source 3: $$ r_3 = \\sqrt{(x + 1)^2 + (y + 1)^2} $$ $$ \\eta_3(x, y, t) = A \\cos(k r_3 - \\omega t) $$ Source 4: $$ r_4 = \\sqrt{(x + 1)^2 + (y - 1)^2} $$ $$ \\eta_4(x, y, t) = A \\cos(k r_4 - \\omega t) $$ Superposition \\[ \\eta(x, y, t) = A \\left[ \\cos(k r_1 - \\omega t) + \\cos(k r_2 - \\omega t) + \\cos(k r_3 - \\omega t) + \\cos(k r_4 - \\omega t) \\right] \\] Using the same conditions for constructive and destructive interference as above: - Constructive: \\(\\Delta r = n\\lambda\\) - Destructive: \\(\\Delta r = \\left(n + \\frac{1}{2}\\right)\\lambda\\) Visualization Here is the interference pattern for the square: Analysis Constructive Interference : In square_only.png , the yellow regions (displacement up to 3.52) indicate where the waves add constructively, particularly at the center and along the axes, where waves from all 4 sources align in phase. Destructive Interference : Blue regions (displacement down to -3.52) show cancellation, forming a grid-like pattern with 4-fold symmetry. The pattern shows a clear square symmetry with concentric rings of constructive and destructive interference. Source markers are not present in this image, but the symmetry suggests the sources are at the vertices of a square. 3. Pentagon (5 Sources) Position the Sources For a regular pentagon centered at the origin with radius 1 (as shown in the previous pentagon image with source markers, where the vertices lie on a unit circle): - Vertex 1: \\(( \\cos(0^\\circ), \\sin(0^\\circ) ) = (1, 0)\\) - Vertex 2: \\(( \\cos(72^\\circ), \\sin(72^\\circ) ) \\approx (0.309, 0.951)\\) - Vertex 3: \\(( \\cos(144^\\circ), \\sin(144^\\circ) ) \\approx (-0.809, 0.588)\\) - Vertex 4: \\(( \\cos(216^\\circ), \\sin(216^\\circ) ) \\approx (-0.809, -0.588)\\) - Vertex 5: \\(( \\cos(288^\\circ), \\sin(288^\\circ) ) \\approx (0.309, -0.951)\\) Wave Equations For source \\(i\\) at \\((x_i, y_i)\\) : $$ r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2} $$ $$ \\eta_i(x, y, t) = A \\cos(k r_i - \\omega t) $$ Superposition \\[ \\eta(x, y, t) = A \\sum_{i=1}^5 \\cos(k r_i - \\omega t) \\] Visualization Here is the interference pattern for the pentagon: Analysis Constructive Interference : In pentagon_only.png , the yellow regions (displacement up to 4) show where the 5 waves add up, particularly at the center where the path lengths from all sources are equal. Destructive Interference : Blue regions (displacement down to -4) form a complex pattern with 5-fold symmetry, reflecting the pentagon\u2019s geometry. The pattern shows a star-like symmetry with a dense network of nodes and antinodes due to the 5 sources. Source markers are not present in this image, but the symmetry indicates the sources are at the vertices of a regular pentagon. 4. Hexagon (6 Sources) Position the Sources For a regular hexagon centered at the origin with radius 1 (as shown in hexagon_only.png , where the vertices lie on a unit circle): - Vertex 1: \\(( \\cos(0^\\circ), \\sin(0^\\circ) ) = (1, 0)\\) - Vertex 2: \\(( \\cos(60^\\circ), \\sin(60^\\circ) ) = (0.5, 0.866)\\) - Vertex 3: \\(( \\cos(120^\\circ), \\sin(120^\\circ) ) = (-0.5, 0.866)\\) - Vertex 4: \\(( \\cos(180^\\circ), \\sin(180^\\circ) ) = (-1, 0)\\) - Vertex 5: \\(( \\cos(240^\\circ), \\sin(240^\\circ) ) = (-0.5, -0.866)\\) - Vertex 6: \\(( \\cos(300^\\circ), \\sin(300^\\circ) ) = (0.5, -0.866)\\) Wave Equations For source \\(i\\) at \\((x_i, y_i)\\) : $$ r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2} $$ $$ \\eta_i(x, y, t) = A \\cos(k r_i - \\omega t) $$ Superposition \\[ \\eta(x, y, t) = A \\sum_{i=1}^6 \\cos(k r_i - \\omega t) \\] Visualization Here is the interference pattern for the hexagon: Analysis Constructive Interference : In hexagon_only.png , the red regions (displacement up to 4) show where the 6 waves add up, particularly at the center where the path lengths from all sources are equal. Destructive Interference : Blue regions (displacement down to -4) form a complex pattern with 6-fold symmetry, reflecting the hexagon\u2019s geometry. The sources are marked with black dots at the vertices, and the pattern shows a highly symmetrical, flower-like structure with a dense network of nodes and antinodes due to the 6 sources. The hexagon\u2019s interference pattern is even more intricate than the pentagon\u2019s, as expected with an additional source. Supplementary Formulas and Concepts Principle of Superposition The total wave displacement at any point is the sum of individual contributions: $$ \\eta(x, y, t) = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t) $$ If all sources are in phase (i.e., \\(\\phi_i = 0\\) ), constructive interference occurs where the path differences are integer multiples of the wavelength: $$ \\Delta r = n\\lambda, \\quad n \\in \\mathbb{Z} $$ Destructive interference occurs when the path differences are half-integer multiples: $$ \\Delta r = \\left(n + \\frac{1}{2}\\right)\\lambda $$ Example: Two Point Sources For two sources at \\((x_1, y_1)\\) and \\((x_2, y_2)\\) , the interference pattern is given by: $$ \\eta(x, y, t) = A \\cos(k r_1 - \\omega t) + A \\cos(k r_2 - \\omega t) $$ Using the trigonometric identity: $$ \\cos a + \\cos b = 2 \\cos\\left(\\frac{a + b}{2}\\right) \\cos\\left(\\frac{a - b}{2}\\right) $$ we get: $$ \\eta(x, y, t) = 2A \\cos\\left(\\frac{k(r_1 + r_2)}{2} - \\omega t\\right) \\cos\\left(\\frac{k(r_1 - r_2)}{2}\\right) $$ This shows that the amplitude envelope (modulation) is given by: $$ 2A \\cos\\left(\\frac{k(r_1 - r_2)}{2}\\right) $$ indicating the locations of nodes (destructive) and antinodes (constructive). Useful Constants Wave number: \\(k = \\frac{2\\pi}{\\lambda}\\) Angular frequency: \\(\\omega = 2\\pi f\\) Speed of wave: \\(v = f \\lambda\\) Summary of Observations Shape Sources Max Displacement Symmetry Pattern Complexity Triangle 3 ~2.64 3-fold Moderate Square 4 ~3.52 4-fold High Pentagon 5 ~4.00 5-fold Very High Hexagon 6 ~4.00 6-fold Extremely High More sources lead to more intricate interference structures . The pattern complexity increases from the triangle to the square to the pentagon to the hexagon. Each shape produces interference patterns reflecting its rotational symmetry : 3-fold for the triangle, 4-fold for the square, 5-fold for the pentagon, and 6-fold for the hexagon. Maximum displacement increases with more sources, though it never reaches \\(N \\cdot A\\) due to partial cancellations. The triangle reaches a maximum of 2.64 (less than 3), the square reaches 3.52 (less than 4), the pentagon reaches 4.00 (less than 5), and the hexagon also reaches 4.00 (less than 6), indicating that beyond a certain number of sources, the maximum displacement may plateau due to increased interference effects. Comparative Analysis Symmetry : The triangle (3 sources) shows 3-fold symmetry, the square (4 sources) shows 4-fold symmetry, the pentagon (5 sources) shows 5-fold symmetry, and the hexagon (6 sources) shows 6-fold symmetry, as expected from the geometry of the polygons. Amplitude : Maximum displacement generally increases with the number of sources, as seen in the table above. However, the hexagon\u2019s maximum displacement (4.00) is the same as the pentagon\u2019s, suggesting that additional sources beyond 5 may not significantly increase the peak amplitude due to more complex interference effects. Pattern Complexity : The interference pattern becomes more intricate as the number of sources increases. The triangle has a moderate pattern, the square shows a high-complexity grid-like structure, the pentagon\u2019s pattern is very complex with a star-like structure, and the hexagon\u2019s pattern is extremely complex with a flower-like structure and a dense network of nodes and antinodes. Conclusion The interference patterns demonstrate the principle of superposition in a visually striking way. Constructive interference creates regions of high amplitude, while destructive interference leads to cancellation. The symmetry of the polygon directly influences the pattern, making this a powerful method to study wave interactions. The addition of the hexagon pattern further illustrates how increasing the number of sources enhances the complexity and symmetry of the interference pattern.","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#interference-patterns-on-a-water-surface","text":"","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be observed when ripples from different points meet, forming distinctive interference patterns. These patterns show how waves combine, either reinforcing each other (constructive interference) or canceling out (destructive interference). Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore concepts like the relationship between wave phase and the effects of multiple sources. This task offers a hands-on approach to learning about wave interactions and their real-world applications, making it an interesting and engaging way to dive into wave physics.","title":"Motivation"},{"location":"1%20Physics/3%20Waves/Problem_1/#task","text":"We need to analyze the interference patterns formed on a water surface due to the superposition of waves emitted from point sources placed at the vertices of a regular polygon. The wave from a single source at position \\((x_i, y_i)\\) is given by: \\[ \\eta_i(x, y, t) = A \\cos(k r_i - \\omega t + \\phi_i) \\] where: - \\(\\eta_i(x, y, t)\\) : Displacement at point \\((x, y)\\) at time \\(t\\) . - \\(A\\) : Amplitude. - \\(k = \\frac{2\\pi}{\\lambda}\\) : Wave number, with \\(\\lambda\\) as the wavelength. - \\(r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) : Distance from the source to point \\((x, y)\\) . - \\(\\omega = 2\\pi f\\) : Angular frequency, with \\(f\\) as the frequency. - \\(\\phi_i\\) : Initial phase.","title":"Task"},{"location":"1%20Physics/3%20Waves/Problem_1/#steps-to-follow","text":"Select a Regular Polygon : We\u2019ll analyze four polygons: triangle, square, pentagon, and hexagon. Position the Sources : Place point sources at the vertices of each polygon. Wave Equations : Write the wave equations for each source. Superposition of Waves : Sum the displacements: $$ \\eta(x, y, t) = \\sum_{i=1}^N \\eta_i(x, y, t) $$ where \\(N\\) is the number of sources. Analyze Interference Patterns : Identify constructive and destructive interference regions. Visualization : Use the provided images for visualization: triangle_only.png (triangle interference pattern), square_only.png (square interference pattern), pentagon_only.png (pentagon interference pattern), and hexagon_only.png (hexagon interference pattern).","title":"Steps to Follow"},{"location":"1%20Physics/3%20Waves/Problem_1/#assumptions","text":"All sources emit waves with the same amplitude \\(A\\) , wavelength \\(\\lambda\\) , and frequency \\(f\\) . The waves are coherent (constant phase difference, \\(\\phi_i = 0\\) ). We\u2019ll use the provided images for visualization.","title":"Assumptions"},{"location":"1%20Physics/3%20Waves/Problem_1/#analysis-for-each-polygon","text":"","title":"Analysis for Each Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#detailed-analysis","text":"","title":"Detailed Analysis"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-equilateral-triangle-3-sources","text":"","title":"1. Equilateral Triangle (3 Sources)"},{"location":"1%20Physics/3%20Waves/Problem_1/#position-the-sources","text":"For an equilateral triangle centered at the origin with side length \\(s = 2\\) (radius to vertex \\(\\approx 1\\) ): - Vertex 1: \\((0, 1)\\) - Vertex 2: \\((-\\sqrt{3}/2, -1/2) \\approx (-0.866, -0.5)\\) - Vertex 3: \\((\\sqrt{3}/2, -1/2) \\approx (0.866, -0.5)\\)","title":"Position the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equations","text":"For each source: - Source 1 at \\((0, 1)\\) : $$ r_1 = \\sqrt{(x - 0)^2 + (y - 1)^2} $$ $$ \\eta_1(x, y, t) = A \\cos(k r_1 - \\omega t) $$ - Source 2 at \\((-0.866, -0.5)\\) : $$ r_2 = \\sqrt{(x + 0.866)^2 + (y + 0.5)^2} $$ $$ \\eta_2(x, y, t) = A \\cos(k r_2 - \\omega t) $$ - Source 3 at \\((0.866, -0.5)\\) : $$ r_3 = \\sqrt{(x - 0.866)^2 + (y + 0.5)^2} $$ $$ \\eta_3(x, y, t) = A \\cos(k r_3 - \\omega t) $$","title":"Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#superposition","text":"The total wave displacement at any point is the sum of individual contributions: $$ \\eta(x, y, t) = A \\left[ \\cos(k r_1 - \\omega t) + \\cos(k r_2 - \\omega t) + \\cos(k r_3 - \\omega t) \\right] $$ If all sources are in phase (i.e., \\(\\phi_i = 0\\) ), constructive interference occurs where the path differences are integer multiples of the wavelength: $$ \\Delta r = n\\lambda, \\quad n \\in \\mathbb{Z} $$ Destructive interference occurs when the path differences are half-integer multiples: $$ \\Delta r = \\left(n + \\frac{1}{2}\\right)\\lambda $$","title":"Superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#visualization","text":"Here is the interference pattern for the triangle:","title":"Visualization"},{"location":"1%20Physics/3%20Waves/Problem_1/#analysis","text":"Constructive Interference : In triangle_only.png , the yellow regions (displacement up to 2.64) indicate where the waves add up, such as near the center where the path lengths from all sources are nearly equal. Destructive Interference : Blue regions (displacement down to -2.64) show cancellation, forming a pattern with 3-fold symmetry. The pattern resembles a series of concentric nodes and antinodes, with a hexagonal-like structure reflecting the triangular arrangement. Source markers are not present in this image, but the symmetry indicates the sources are at the vertices of an equilateral triangle.","title":"Analysis"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-square-4-sources","text":"","title":"2. Square (4 Sources)"},{"location":"1%20Physics/3%20Waves/Problem_1/#position-the-sources_1","text":"For a square centered at the origin with side length 2: - Source 1: \\((1, 1)\\) - Source 2: \\((1, -1)\\) - Source 3: \\((-1, -1)\\) - Source 4: \\((-1, 1)\\)","title":"Position the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equations_1","text":"Source 1: $$ r_1 = \\sqrt{(x - 1)^2 + (y - 1)^2} $$ $$ \\eta_1(x, y, t) = A \\cos(k r_1 - \\omega t) $$ Source 2: $$ r_2 = \\sqrt{(x - 1)^2 + (y + 1)^2} $$ $$ \\eta_2(x, y, t) = A \\cos(k r_2 - \\omega t) $$ Source 3: $$ r_3 = \\sqrt{(x + 1)^2 + (y + 1)^2} $$ $$ \\eta_3(x, y, t) = A \\cos(k r_3 - \\omega t) $$ Source 4: $$ r_4 = \\sqrt{(x + 1)^2 + (y - 1)^2} $$ $$ \\eta_4(x, y, t) = A \\cos(k r_4 - \\omega t) $$","title":"Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#superposition_1","text":"\\[ \\eta(x, y, t) = A \\left[ \\cos(k r_1 - \\omega t) + \\cos(k r_2 - \\omega t) + \\cos(k r_3 - \\omega t) + \\cos(k r_4 - \\omega t) \\right] \\] Using the same conditions for constructive and destructive interference as above: - Constructive: \\(\\Delta r = n\\lambda\\) - Destructive: \\(\\Delta r = \\left(n + \\frac{1}{2}\\right)\\lambda\\)","title":"Superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#visualization_1","text":"Here is the interference pattern for the square:","title":"Visualization"},{"location":"1%20Physics/3%20Waves/Problem_1/#analysis_1","text":"Constructive Interference : In square_only.png , the yellow regions (displacement up to 3.52) indicate where the waves add constructively, particularly at the center and along the axes, where waves from all 4 sources align in phase. Destructive Interference : Blue regions (displacement down to -3.52) show cancellation, forming a grid-like pattern with 4-fold symmetry. The pattern shows a clear square symmetry with concentric rings of constructive and destructive interference. Source markers are not present in this image, but the symmetry suggests the sources are at the vertices of a square.","title":"Analysis"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-pentagon-5-sources","text":"","title":"3. Pentagon (5 Sources)"},{"location":"1%20Physics/3%20Waves/Problem_1/#position-the-sources_2","text":"For a regular pentagon centered at the origin with radius 1 (as shown in the previous pentagon image with source markers, where the vertices lie on a unit circle): - Vertex 1: \\(( \\cos(0^\\circ), \\sin(0^\\circ) ) = (1, 0)\\) - Vertex 2: \\(( \\cos(72^\\circ), \\sin(72^\\circ) ) \\approx (0.309, 0.951)\\) - Vertex 3: \\(( \\cos(144^\\circ), \\sin(144^\\circ) ) \\approx (-0.809, 0.588)\\) - Vertex 4: \\(( \\cos(216^\\circ), \\sin(216^\\circ) ) \\approx (-0.809, -0.588)\\) - Vertex 5: \\(( \\cos(288^\\circ), \\sin(288^\\circ) ) \\approx (0.309, -0.951)\\)","title":"Position the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equations_2","text":"For source \\(i\\) at \\((x_i, y_i)\\) : $$ r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2} $$ $$ \\eta_i(x, y, t) = A \\cos(k r_i - \\omega t) $$","title":"Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#superposition_2","text":"\\[ \\eta(x, y, t) = A \\sum_{i=1}^5 \\cos(k r_i - \\omega t) \\]","title":"Superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#visualization_2","text":"Here is the interference pattern for the pentagon:","title":"Visualization"},{"location":"1%20Physics/3%20Waves/Problem_1/#analysis_2","text":"Constructive Interference : In pentagon_only.png , the yellow regions (displacement up to 4) show where the 5 waves add up, particularly at the center where the path lengths from all sources are equal. Destructive Interference : Blue regions (displacement down to -4) form a complex pattern with 5-fold symmetry, reflecting the pentagon\u2019s geometry. The pattern shows a star-like symmetry with a dense network of nodes and antinodes due to the 5 sources. Source markers are not present in this image, but the symmetry indicates the sources are at the vertices of a regular pentagon.","title":"Analysis"},{"location":"1%20Physics/3%20Waves/Problem_1/#4-hexagon-6-sources","text":"","title":"4. Hexagon (6 Sources)"},{"location":"1%20Physics/3%20Waves/Problem_1/#position-the-sources_3","text":"For a regular hexagon centered at the origin with radius 1 (as shown in hexagon_only.png , where the vertices lie on a unit circle): - Vertex 1: \\(( \\cos(0^\\circ), \\sin(0^\\circ) ) = (1, 0)\\) - Vertex 2: \\(( \\cos(60^\\circ), \\sin(60^\\circ) ) = (0.5, 0.866)\\) - Vertex 3: \\(( \\cos(120^\\circ), \\sin(120^\\circ) ) = (-0.5, 0.866)\\) - Vertex 4: \\(( \\cos(180^\\circ), \\sin(180^\\circ) ) = (-1, 0)\\) - Vertex 5: \\(( \\cos(240^\\circ), \\sin(240^\\circ) ) = (-0.5, -0.866)\\) - Vertex 6: \\(( \\cos(300^\\circ), \\sin(300^\\circ) ) = (0.5, -0.866)\\)","title":"Position the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equations_3","text":"For source \\(i\\) at \\((x_i, y_i)\\) : $$ r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2} $$ $$ \\eta_i(x, y, t) = A \\cos(k r_i - \\omega t) $$","title":"Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#superposition_3","text":"\\[ \\eta(x, y, t) = A \\sum_{i=1}^6 \\cos(k r_i - \\omega t) \\]","title":"Superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#visualization_3","text":"Here is the interference pattern for the hexagon:","title":"Visualization"},{"location":"1%20Physics/3%20Waves/Problem_1/#analysis_3","text":"Constructive Interference : In hexagon_only.png , the red regions (displacement up to 4) show where the 6 waves add up, particularly at the center where the path lengths from all sources are equal. Destructive Interference : Blue regions (displacement down to -4) form a complex pattern with 6-fold symmetry, reflecting the hexagon\u2019s geometry. The sources are marked with black dots at the vertices, and the pattern shows a highly symmetrical, flower-like structure with a dense network of nodes and antinodes due to the 6 sources. The hexagon\u2019s interference pattern is even more intricate than the pentagon\u2019s, as expected with an additional source.","title":"Analysis"},{"location":"1%20Physics/3%20Waves/Problem_1/#supplementary-formulas-and-concepts","text":"","title":"Supplementary Formulas and Concepts"},{"location":"1%20Physics/3%20Waves/Problem_1/#principle-of-superposition","text":"The total wave displacement at any point is the sum of individual contributions: $$ \\eta(x, y, t) = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t) $$ If all sources are in phase (i.e., \\(\\phi_i = 0\\) ), constructive interference occurs where the path differences are integer multiples of the wavelength: $$ \\Delta r = n\\lambda, \\quad n \\in \\mathbb{Z} $$ Destructive interference occurs when the path differences are half-integer multiples: $$ \\Delta r = \\left(n + \\frac{1}{2}\\right)\\lambda $$","title":"Principle of Superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#example-two-point-sources","text":"For two sources at \\((x_1, y_1)\\) and \\((x_2, y_2)\\) , the interference pattern is given by: $$ \\eta(x, y, t) = A \\cos(k r_1 - \\omega t) + A \\cos(k r_2 - \\omega t) $$ Using the trigonometric identity: $$ \\cos a + \\cos b = 2 \\cos\\left(\\frac{a + b}{2}\\right) \\cos\\left(\\frac{a - b}{2}\\right) $$ we get: $$ \\eta(x, y, t) = 2A \\cos\\left(\\frac{k(r_1 + r_2)}{2} - \\omega t\\right) \\cos\\left(\\frac{k(r_1 - r_2)}{2}\\right) $$ This shows that the amplitude envelope (modulation) is given by: $$ 2A \\cos\\left(\\frac{k(r_1 - r_2)}{2}\\right) $$ indicating the locations of nodes (destructive) and antinodes (constructive).","title":"Example: Two Point Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#useful-constants","text":"Wave number: \\(k = \\frac{2\\pi}{\\lambda}\\) Angular frequency: \\(\\omega = 2\\pi f\\) Speed of wave: \\(v = f \\lambda\\)","title":"Useful Constants"},{"location":"1%20Physics/3%20Waves/Problem_1/#summary-of-observations","text":"Shape Sources Max Displacement Symmetry Pattern Complexity Triangle 3 ~2.64 3-fold Moderate Square 4 ~3.52 4-fold High Pentagon 5 ~4.00 5-fold Very High Hexagon 6 ~4.00 6-fold Extremely High More sources lead to more intricate interference structures . The pattern complexity increases from the triangle to the square to the pentagon to the hexagon. Each shape produces interference patterns reflecting its rotational symmetry : 3-fold for the triangle, 4-fold for the square, 5-fold for the pentagon, and 6-fold for the hexagon. Maximum displacement increases with more sources, though it never reaches \\(N \\cdot A\\) due to partial cancellations. The triangle reaches a maximum of 2.64 (less than 3), the square reaches 3.52 (less than 4), the pentagon reaches 4.00 (less than 5), and the hexagon also reaches 4.00 (less than 6), indicating that beyond a certain number of sources, the maximum displacement may plateau due to increased interference effects.","title":"Summary of Observations"},{"location":"1%20Physics/3%20Waves/Problem_1/#comparative-analysis","text":"Symmetry : The triangle (3 sources) shows 3-fold symmetry, the square (4 sources) shows 4-fold symmetry, the pentagon (5 sources) shows 5-fold symmetry, and the hexagon (6 sources) shows 6-fold symmetry, as expected from the geometry of the polygons. Amplitude : Maximum displacement generally increases with the number of sources, as seen in the table above. However, the hexagon\u2019s maximum displacement (4.00) is the same as the pentagon\u2019s, suggesting that additional sources beyond 5 may not significantly increase the peak amplitude due to more complex interference effects. Pattern Complexity : The interference pattern becomes more intricate as the number of sources increases. The triangle has a moderate pattern, the square shows a high-complexity grid-like structure, the pentagon\u2019s pattern is very complex with a star-like structure, and the hexagon\u2019s pattern is extremely complex with a flower-like structure and a dense network of nodes and antinodes.","title":"Comparative Analysis"},{"location":"1%20Physics/3%20Waves/Problem_1/#conclusion","text":"The interference patterns demonstrate the principle of superposition in a visually striking way. Constructive interference creates regions of high amplitude, while destructive interference leads to cancellation. The symmetry of the polygon directly influences the pattern, making this a powerful method to study wave interactions. The addition of the hexagon pattern further illustrates how increasing the number of sources enhances the complexity and symmetry of the interference pattern.","title":"Conclusion"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}