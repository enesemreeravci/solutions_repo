{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Deriving the Equations of Motion Projectile motion can be analyzed by breaking it into horizontal and vertical components. Assuming no air resistance, the only acceleration is due to gravity, acting downward. This assumption simplifies the equations, making it easier to analyze motion using basic kinematic principles. Horizontal Motion: The horizontal component of velocity remains constant since there is no horizontal acceleration. The displacement in the horizontal direction is given by: \\(x = v_0 \\cdot \\cos(\\theta) \\cdot t\\) This equation shows that the horizontal motion is uniform and independent of gravity. Vertical Motion: The vertical component of velocity changes due to gravitational acceleration. The displacement in the vertical direction is given by: \\(y = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} \\cdot g \\cdot t^2\\) The vertical component influences the total time of flight and peak height of the projectile. Time of Flight For a projectile launched from ground level ( \\(h = 0\\) ), it reaches the ground when \\(y = 0\\) . Solving for time: \\(t = \\frac{2 v_0 \\sin(\\theta)}{g}\\) If launched from an initial height \\(h\\) , the time of flight adjusts: \\(t = \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) Range For ground level ( \\(h = 0\\) ): \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) For an initial height \\(h\\) : \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) In chaotic situations (e.g., variable wind), range can be modeled with a perturbation term: \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) where \\(\\delta R\\) is a random noise factor (e.g., from wind gusts), typically drawn from a distribution like \\(\\delta R \\sim \\mathcal{N}(0, \\sigma)\\) , with \\(\\sigma\\) representing the noise magnitude. Family of Solutions From the range formulas\u2014 \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) (for \\(h = 0\\) ), \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) (for \\(h > 0\\) ), and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) (for noise)\u2014we derive a family of solutions for different \\(\\theta\\) , \\(v_0\\) , \\(g\\) , \\(h\\) , and environmental variability. Notably: For \\(h = 0\\) , symmetry holds around \\(45^\\circ\\) . Height \\(h\\) extends range and shifts optimal angles. Noise \\(\\delta R\\) introduces unpredictability, mimicking real-world turbulence. 2. Practical Applications Real-World Scenarios Projectile motion applies to various real-world cases, including: Sports : Soccer free kicks from elevated positions (e.g., 20 m) adjust for height. Basketball shots from a 3 m hoop height tweak the arc for success. Engineering : Artillery on a 50 m hill uses height-adjusted range for targeting. Space Exploration & Astrophysics : Spacecraft landings on uneven terrain require precise trajectory calculations. Meteor paths vary with atmospheric turbulence, a chaotic factor. Adaptations Uneven Terrain : Use \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height variations. Air Resistance : Consider drag force, reducing range systematically. Chaotic Situations : Model wind gusts or turbulence with \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) , where \\(\\delta R\\) varies randomly. 3. Implementation Graphical Outputs Figure 1: Range as a Function of Angle of Projection (v\u2080 = 50 m/s, h = 0) Figure 2: Range vs Angle for Different Initial Velocities and Heights Figure 3: Chaotic Range with Environmental Noise (v\u2080 = 50 m/s, h = 0) Python Simulation import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s\u00b2) def calculate_range(v0, theta, h=0, chaotic=False, sigma=10): theta_rad = np.radians(theta) if h == 0 and not chaotic: return (v0**2 * np.sin(2 * theta_rad)) / g elif h > 0 and not chaotic: t = (v0 * np.sin(theta_rad) + np.sqrt((v0 * np.sin(theta_rad))**2 + 2 * g * h)) / g return v0 * np.cos(theta_rad) * t else: # Chaotic case R = (v0**2 * np.sin(2 * theta_rad)) / g delta_R = np.random.normal(0, sigma) # Random noise return R + delta_R angles = np.linspace(0, 90, 100) v0_values = [20, 50, 80] h_values = [0, 10] # Figure 2: Velocity and Height Variations plt.figure(figsize=(10, 6)) for v0 in v0_values: for h in h_values: ranges = [calculate_range(v0, angle, h) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s, h = {h} m') plt.axvline(x=45, linestyle='--', color='black', label='Reference at 45\u00b0') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs Angle for Various Velocities and Heights') plt.grid(True) plt.legend() plt.tight_layout() plt.show() # Figure 3: Chaotic Range plt.figure(figsize=(10, 6)) v0 = 50 chaotic_ranges = [calculate_range(v0, angle, h=0, chaotic=True, sigma=20) for angle in angles] plt.scatter(angles, chaotic_ranges, s=10, alpha=0.5, label='Chaotic Range (v\u2080 = 50 m/s)') ideal_ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ideal_ranges, 'r--', label='Ideal Range') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Chaotic Range with Environmental Noise') plt.grid(True) plt.legend() plt.tight_layout() plt.show() Python code simulates range with height and chaotic noise. Code available upon request. Graphical Interpretation Figure 1 : Range vs. angle for \\(v_0 = 50\\) m/s, \\(h = 0\\) , peaking at 45\u00b0. Figure 2 : Compares velocities and heights, showing increased range with \\(h\\) . Figure 3 : Displays chaotic range for \\(v_0 = 50\\) m/s with random noise ( \\(\\sigma = 20\\) m), scattering around the ideal curve, simulating wind gusts. 4. Limitations and Extensions Limitations Idealized Model : Assumes no air resistance or spin. Chaotic model is simplistic, ignoring directional wind effects. External Factors : Complex terrain and altitude variations are partially addressed with \\(h\\) . Suggestions for Improvement Incorporate Drag : Use \\(F_d = -k \\cdot v\\) for systematic range reduction. Advanced Chaos : Model wind direction and speed dynamically. Variable Gravity : Adjust \\(g\\) for different environments. Interactive Tools : Allow inputs for \\(v_0\\) , \\(\\theta\\) , \\(h\\) , and noise levels. Example Scenarios Basketball Shot with Wind : A player shoots from 5 m away, aiming for a 3 m high hoop ( \\(h = 3\\) m), with \\(v_0 = 10\\) m/s at \\(\\theta = 50^\\circ\\) . Using \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) , the range is ~5.2 m, just overshooting. A sudden wind gust ( \\(\\delta R = -0.5\\) m) reduces it to 4.7 m, missing the hoop, showing how chaos affects precision. Artillery on a Cliff : A cannon on a 20 m cliff ( \\(h = 20\\) m) fires at \\(v_0 = 100\\) m/s, \\(\\theta = 30^\\circ\\) . The height-adjusted range is ~1018 m, far beyond the 866 m for \\(h = 0\\) . In turbulent conditions ( \\(R_{\\text{chaotic}}\\) with \\(\\sigma = 50\\) m), the range could vary between 968 m and 1068 m, complicating targeting. Conclusion This investigation explores projectile range as a function of angle, velocity, height, and environmental chaos. The extended formulas\u2014 \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) for noise\u2014enhance the model\u2019s versatility, connecting theory to applications like artillery on hills or sports shots in windy conditions. Future work could refine chaotic effects with directional wind or drag for greater realism.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Investigating the Range as a Function of the Angle of Projection","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"Projectile motion can be analyzed by breaking it into horizontal and vertical components. Assuming no air resistance, the only acceleration is due to gravity, acting downward. This assumption simplifies the equations, making it easier to analyze motion using basic kinematic principles.","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"The horizontal component of velocity remains constant since there is no horizontal acceleration. The displacement in the horizontal direction is given by: \\(x = v_0 \\cdot \\cos(\\theta) \\cdot t\\) This equation shows that the horizontal motion is uniform and independent of gravity.","title":"Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical component of velocity changes due to gravitational acceleration. The displacement in the vertical direction is given by: \\(y = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} \\cdot g \\cdot t^2\\) The vertical component influences the total time of flight and peak height of the projectile.","title":"Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"For a projectile launched from ground level ( \\(h = 0\\) ), it reaches the ground when \\(y = 0\\) . Solving for time: \\(t = \\frac{2 v_0 \\sin(\\theta)}{g}\\) If launched from an initial height \\(h\\) , the time of flight adjusts: \\(t = \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\)","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range","text":"For ground level ( \\(h = 0\\) ): \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) For an initial height \\(h\\) : \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) In chaotic situations (e.g., variable wind), range can be modeled with a perturbation term: \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) where \\(\\delta R\\) is a random noise factor (e.g., from wind gusts), typically drawn from a distribution like \\(\\delta R \\sim \\mathcal{N}(0, \\sigma)\\) , with \\(\\sigma\\) representing the noise magnitude.","title":"Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"From the range formulas\u2014 \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) (for \\(h = 0\\) ), \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) (for \\(h > 0\\) ), and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) (for noise)\u2014we derive a family of solutions for different \\(\\theta\\) , \\(v_0\\) , \\(g\\) , \\(h\\) , and environmental variability. Notably: For \\(h = 0\\) , symmetry holds around \\(45^\\circ\\) . Height \\(h\\) extends range and shifts optimal angles. Noise \\(\\delta R\\) introduces unpredictability, mimicking real-world turbulence.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-practical-applications","text":"","title":"2. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-scenarios","text":"Projectile motion applies to various real-world cases, including: Sports : Soccer free kicks from elevated positions (e.g., 20 m) adjust for height. Basketball shots from a 3 m hoop height tweak the arc for success. Engineering : Artillery on a 50 m hill uses height-adjusted range for targeting. Space Exploration & Astrophysics : Spacecraft landings on uneven terrain require precise trajectory calculations. Meteor paths vary with atmospheric turbulence, a chaotic factor.","title":"Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#adaptations","text":"Uneven Terrain : Use \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height variations. Air Resistance : Consider drag force, reducing range systematically. Chaotic Situations : Model wind gusts or turbulence with \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) , where \\(\\delta R\\) varies randomly.","title":"Adaptations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-implementation","text":"","title":"3. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-outputs","text":"Figure 1: Range as a Function of Angle of Projection (v\u2080 = 50 m/s, h = 0) Figure 2: Range vs Angle for Different Initial Velocities and Heights Figure 3: Chaotic Range with Environmental Noise (v\u2080 = 50 m/s, h = 0)","title":"Graphical Outputs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s\u00b2) def calculate_range(v0, theta, h=0, chaotic=False, sigma=10): theta_rad = np.radians(theta) if h == 0 and not chaotic: return (v0**2 * np.sin(2 * theta_rad)) / g elif h > 0 and not chaotic: t = (v0 * np.sin(theta_rad) + np.sqrt((v0 * np.sin(theta_rad))**2 + 2 * g * h)) / g return v0 * np.cos(theta_rad) * t else: # Chaotic case R = (v0**2 * np.sin(2 * theta_rad)) / g delta_R = np.random.normal(0, sigma) # Random noise return R + delta_R angles = np.linspace(0, 90, 100) v0_values = [20, 50, 80] h_values = [0, 10] # Figure 2: Velocity and Height Variations plt.figure(figsize=(10, 6)) for v0 in v0_values: for h in h_values: ranges = [calculate_range(v0, angle, h) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s, h = {h} m') plt.axvline(x=45, linestyle='--', color='black', label='Reference at 45\u00b0') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs Angle for Various Velocities and Heights') plt.grid(True) plt.legend() plt.tight_layout() plt.show() # Figure 3: Chaotic Range plt.figure(figsize=(10, 6)) v0 = 50 chaotic_ranges = [calculate_range(v0, angle, h=0, chaotic=True, sigma=20) for angle in angles] plt.scatter(angles, chaotic_ranges, s=10, alpha=0.5, label='Chaotic Range (v\u2080 = 50 m/s)') ideal_ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ideal_ranges, 'r--', label='Ideal Range') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Chaotic Range with Environmental Noise') plt.grid(True) plt.legend() plt.tight_layout() plt.show() Python code simulates range with height and chaotic noise. Code available upon request.","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-interpretation","text":"Figure 1 : Range vs. angle for \\(v_0 = 50\\) m/s, \\(h = 0\\) , peaking at 45\u00b0. Figure 2 : Compares velocities and heights, showing increased range with \\(h\\) . Figure 3 : Displays chaotic range for \\(v_0 = 50\\) m/s with random noise ( \\(\\sigma = 20\\) m), scattering around the ideal curve, simulating wind gusts.","title":"Graphical Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-limitations-and-extensions","text":"","title":"4. Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"Idealized Model : Assumes no air resistance or spin. Chaotic model is simplistic, ignoring directional wind effects. External Factors : Complex terrain and altitude variations are partially addressed with \\(h\\) .","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions-for-improvement","text":"Incorporate Drag : Use \\(F_d = -k \\cdot v\\) for systematic range reduction. Advanced Chaos : Model wind direction and speed dynamically. Variable Gravity : Adjust \\(g\\) for different environments. Interactive Tools : Allow inputs for \\(v_0\\) , \\(\\theta\\) , \\(h\\) , and noise levels.","title":"Suggestions for Improvement"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#example-scenarios","text":"Basketball Shot with Wind : A player shoots from 5 m away, aiming for a 3 m high hoop ( \\(h = 3\\) m), with \\(v_0 = 10\\) m/s at \\(\\theta = 50^\\circ\\) . Using \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) , the range is ~5.2 m, just overshooting. A sudden wind gust ( \\(\\delta R = -0.5\\) m) reduces it to 4.7 m, missing the hoop, showing how chaos affects precision. Artillery on a Cliff : A cannon on a 20 m cliff ( \\(h = 20\\) m) fires at \\(v_0 = 100\\) m/s, \\(\\theta = 30^\\circ\\) . The height-adjusted range is ~1018 m, far beyond the 866 m for \\(h = 0\\) . In turbulent conditions ( \\(R_{\\text{chaotic}}\\) with \\(\\sigma = 50\\) m), the range could vary between 968 m and 1068 m, complicating targeting.","title":"Example Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This investigation explores projectile range as a function of angle, velocity, height, and environmental chaos. The extended formulas\u2014 \\(R = v_0 \\cos(\\theta) \\cdot \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2 g h}}{g}\\) for height and \\(R_{\\text{chaotic}} = \\frac{v_0^2 \\sin(2\\theta)}{g} + \\delta R\\) for noise\u2014enhance the model\u2019s versatility, connecting theory to applications like artillery on hills or sports shots in windy conditions. Future work could refine chaotic effects with directional wind or drag for greater realism.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Deriving the Equations of Motion Projectile motion can be analyzed by breaking it into horizontal and vertical components. Assuming no air resistance, the only acceleration is due to gravity, acting downward. This assumption simplifies the equations, making it easier to analyze motion using basic kinematic principles. Horizontal Motion: The horizontal component of velocity remains constant since there is no horizontal acceleration. The displacement in the horizontal direction is given by: x = v0 * cos(theta) * t This equation shows that the horizontal motion is uniform and independent of gravity. Vertical Motion: The vertical component of velocity changes due to gravitational acceleration. The displacement in the vertical direction is given by: y = v0 * sin(theta) * t - 0.5 * g * t**2 The vertical component influences the total time of flight and peak height of the projectile. Time of Flight The projectile reaches the ground when y = 0. Solving for time: t = 0 and t = (2 * v0 * sin(theta)) / g The first solution represents the initial launch time. The second solution gives the total flight duration. Range Substituting the time of flight into the horizontal motion equation: R = (v0**2 * sin(2 * theta)) / g This equation shows that the range depends on the initial velocity and the launch angle. The function sin(2 * theta) explains why the range is symmetric around 45 degrees. Family of Solutions From the range formula R = (v0**2 * sin(2 * theta)) / g, we derive a family of solutions for different values of theta and v0. Notably: For every angle \u03b8, there exists a complementary angle (90 - \u03b8) that yields the same range. As v0 increases, the maximum achievable range increases quadratically. The trajectory and time of flight can be visualized as parametric functions of angle and initial velocity. 2. Practical Applications Real-World Scenarios Projectile motion applies to various real-world cases, including: Sports : Soccer players use precise angles to shoot the ball past defenders. Basketball shots require players to estimate the ideal arc for successful scoring. Engineering : Projectile calculations are critical in artillery and missile guidance systems. Space Exploration & Astrophysics : Scientists compute trajectories to optimize spacecraft landings. The motion of celestial bodies and meteor impacts follow similar equations. Adaptations Uneven Terrain : Adjust the initial height h to reflect varying ground levels. Air Resistance : Consider drag force, which modifies trajectory curves and reduces range. Wind Effects : Incorporate horizontal forces, affecting projectiles over long distances. 3. Implementation Graphical Outputs Figure 1: Range as a Function of Angle of Projection (v\u2080 = 50 m/s) Figure 2: Range vs Angle for Different Initial Velocities Figure 3: Chaotic Range with Environmental Noise Python Simulation import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s\u00b2) def calculate_range(v0, theta): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g angles = np.linspace(0, 90, 100) v0_values = [20, 35, 50, 65, 80] plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') plt.axvline(x=45, linestyle='--', color='black', label='Max Range at 45\u00b0') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs Angle for Various Initial Velocities') plt.grid(True) plt.legend() plt.tight_layout() plt.show() in Python to generate the graphs shown above. Code available upon request.* Graphical Interpretation Figure 1 shows how the projectile's range changes with launch angle when the initial velocity is fixed at 50 m/s. The curve peaks at 45\u00b0, demonstrating the ideal angle for maximum distance. Figure 2 compares several different initial velocities. While all curves peak at 45\u00b0, higher velocities yield longer ranges. Figure 3 introduces randomness (e.g., wind/turbulence). It shows how real-world factors can cause unpredictable variations in range, even at the same angles. , showing that: All curves peak at 45 degrees , confirming it gives the maximum range. Higher velocities produce longer ranges . The symmetry of each curve is preserved. 4. Limitations and Extensions Limitations Idealized Model : Assumes a vacuum (no air resistance). Ignores spin effects and real-world complexities. External Factors : Wind, altitude changes, and rotational effects can alter expected trajectories. Suggestions for Improvement Incorporate Drag : Model air resistance using differential equations that factor in object size and shape. Variable Gravity : Reflect gravitational changes on different planets or with altitude. Wind Effects : Introduce lateral forces and variable resistance based on wind velocity. Interactive Simulations : Build user-friendly interfaces that accept dynamic inputs (velocity, angle, gravity, drag). Conclusion This investigation provides a comprehensive understanding of how projectile range depends on the angle of projection and other initial conditions. By developing a computational tool and visualizing results, we enhance both theoretical knowledge and practical application. Future extensions could include incorporating real-world effects such as wind and air resistance to refine predictions and develop more accurate and interactive educational models.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-1","text":"Investigating the Range as a Function of the Angle of Projection","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deriving-the-equations-of-motion","text":"Projectile motion can be analyzed by breaking it into horizontal and vertical components. Assuming no air resistance, the only acceleration is due to gravity, acting downward. This assumption simplifies the equations, making it easier to analyze motion using basic kinematic principles.","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#horizontal-motion","text":"The horizontal component of velocity remains constant since there is no horizontal acceleration. The displacement in the horizontal direction is given by: x = v0 * cos(theta) * t This equation shows that the horizontal motion is uniform and independent of gravity.","title":"Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#vertical-motion","text":"The vertical component of velocity changes due to gravitational acceleration. The displacement in the vertical direction is given by: y = v0 * sin(theta) * t - 0.5 * g * t**2 The vertical component influences the total time of flight and peak height of the projectile.","title":"Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-of-flight","text":"The projectile reaches the ground when y = 0. Solving for time: t = 0 and t = (2 * v0 * sin(theta)) / g The first solution represents the initial launch time. The second solution gives the total flight duration.","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#range","text":"Substituting the time of flight into the horizontal motion equation: R = (v0**2 * sin(2 * theta)) / g This equation shows that the range depends on the initial velocity and the launch angle. The function sin(2 * theta) explains why the range is symmetric around 45 degrees.","title":"Range"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#family-of-solutions","text":"From the range formula R = (v0**2 * sin(2 * theta)) / g, we derive a family of solutions for different values of theta and v0. Notably: For every angle \u03b8, there exists a complementary angle (90 - \u03b8) that yields the same range. As v0 increases, the maximum achievable range increases quadratically. The trajectory and time of flight can be visualized as parametric functions of angle and initial velocity.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-practical-applications","text":"","title":"2. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#real-world-scenarios","text":"Projectile motion applies to various real-world cases, including: Sports : Soccer players use precise angles to shoot the ball past defenders. Basketball shots require players to estimate the ideal arc for successful scoring. Engineering : Projectile calculations are critical in artillery and missile guidance systems. Space Exploration & Astrophysics : Scientists compute trajectories to optimize spacecraft landings. The motion of celestial bodies and meteor impacts follow similar equations.","title":"Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#adaptations","text":"Uneven Terrain : Adjust the initial height h to reflect varying ground levels. Air Resistance : Consider drag force, which modifies trajectory curves and reduces range. Wind Effects : Incorporate horizontal forces, affecting projectiles over long distances.","title":"Adaptations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-implementation","text":"","title":"3. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-outputs","text":"Figure 1: Range as a Function of Angle of Projection (v\u2080 = 50 m/s) Figure 2: Range vs Angle for Different Initial Velocities Figure 3: Chaotic Range with Environmental Noise","title":"Graphical Outputs"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s\u00b2) def calculate_range(v0, theta): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g angles = np.linspace(0, 90, 100) v0_values = [20, 35, 50, 65, 80] plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') plt.axvline(x=45, linestyle='--', color='black', label='Max Range at 45\u00b0') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs Angle for Various Initial Velocities') plt.grid(True) plt.legend() plt.tight_layout() plt.show() in Python to generate the graphs shown above. Code available upon request.*","title":"Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-interpretation","text":"Figure 1 shows how the projectile's range changes with launch angle when the initial velocity is fixed at 50 m/s. The curve peaks at 45\u00b0, demonstrating the ideal angle for maximum distance. Figure 2 compares several different initial velocities. While all curves peak at 45\u00b0, higher velocities yield longer ranges. Figure 3 introduces randomness (e.g., wind/turbulence). It shows how real-world factors can cause unpredictable variations in range, even at the same angles. , showing that: All curves peak at 45 degrees , confirming it gives the maximum range. Higher velocities produce longer ranges . The symmetry of each curve is preserved.","title":"Graphical Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-limitations-and-extensions","text":"","title":"4. Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations","text":"Idealized Model : Assumes a vacuum (no air resistance). Ignores spin effects and real-world complexities. External Factors : Wind, altitude changes, and rotational effects can alter expected trajectories.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#suggestions-for-improvement","text":"Incorporate Drag : Model air resistance using differential equations that factor in object size and shape. Variable Gravity : Reflect gravitational changes on different planets or with altitude. Wind Effects : Introduce lateral forces and variable resistance based on wind velocity. Interactive Simulations : Build user-friendly interfaces that accept dynamic inputs (velocity, angle, gravity, drag).","title":"Suggestions for Improvement"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"This investigation provides a comprehensive understanding of how projectile range depends on the angle of projection and other initial conditions. By developing a computational tool and visualizing results, we enhance both theoretical knowledge and practical application. Future extensions could include incorporating real-world effects such as wind and air resistance to refine predictions and develop more accurate and interactive educational models.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 3 Orbital Period and Orbital Radius 1. Theoretical Foundation Deriving Kepler\u2019s Third Law for Circular Orbits Kepler\u2019s Third Law relates the square of the orbital period ( \\(T^2\\) ) to the cube of the orbital radius ( \\(r^3\\) ) for bodies in circular orbits under gravitational influence. Start with Newton\u2019s law of gravitation and centripetal force for a satellite (mass \\(m\\) ) orbiting a central body (mass \\(M\\) ): Gravitational force: \\(F_g = \\frac{G M m}{r^2}\\) Centripetal force required for circular motion: \\(F_c = \\frac{m v^2}{r}\\) Equate these forces: \\(\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\) Cancel \\(m\\) (assuming \\(m \\neq 0\\) ) and simplify: \\(\\frac{G M}{r^2} = \\frac{v^2}{r}\\) Multiply through by \\(r\\) : \\(\\frac{G M}{r} = v^2\\) The orbital velocity \\(v\\) relates to the period \\(T\\) via the circumference: \\(v = \\frac{2\\pi r}{T}\\) . Substitute: \\(\\frac{G M}{r} = \\left(\\frac{2\\pi r}{T}\\right)^2\\) Simplify: \\(\\frac{G M}{r} = \\frac{4\\pi^2 r^2}{T^2}\\) Rearrange: \\(G M = \\frac{4\\pi^2 r^3}{T^2}\\) Solve for \\(T^2\\) : \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This is Kepler\u2019s Third Law for circular orbits, where \\(T^2 \\propto r^3\\) , and the constant \\(\\frac{4\\pi^2}{G M}\\) depends on the central mass \\(M\\) . Implications Mass Determination : If \\(T\\) and \\(r\\) are measured, \\(M\\) can be calculated: \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) . Distance Estimation : Known \\(M\\) and \\(T\\) allow solving for \\(r\\) . 2. Astronomical Implications Kepler\u2019s Third Law enables: - Planetary Masses : Observing satellite orbits (e.g., moons) reveals the parent body\u2019s mass. - Orbital Radii : Period measurements of planets or asteroids refine their distances from the Sun. - System Stability : Predicts stable orbits for artificial satellites. 3. Real-World Examples Moon\u2019s Orbit : \\(r \\approx 384,400\\) km, \\(T \\approx 27.32\\) days. Using \\(M_{\\text{Earth}} \\approx 5.972 \\times 10^{24}\\) kg, the law holds, confirming Earth\u2019s mass. Earth\u2019s Orbit : \\(r \\approx 1\\) AU ( \\(149.6 \\times 10^6\\) km), \\(T = 1\\) year, used historically to define the AU via the Sun\u2019s mass. 4. Implementation Graphical Outputs Figure 1: Circular Orbit Visualization Shows a satellite tracing a circular path around a central body. Figure 2: \\(T^2\\) vs. \\(r^3\\) Relationship Log-log plot of \\(T^2\\) vs. \\(r^3\\) for Solar System planets, showing linearity. Python Simulation import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg (Sun\u2019s mass) M_earth = 5.972e24 # kg def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Figure 1: Circular Orbit t = np.linspace(0, 2 * np.pi, 100) r_moon = 384400e3 # m x = r_moon * np.cos(t) y = r_moon * np.sin(t) plt.figure(figsize=(8, 8)) plt.plot(x, y, 'b-', label='Moon\u2019s Orbit') plt.plot(0, 0, 'yo', label='Earth', markersize=10) plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Circular Orbit Visualization') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('circular_orbit.png') # Save as file plt.show() # Figure 2: T\u00b2 vs r\u00b3 planets = { 'Mercury': (57.9e9, 87.97 * 86400), # r (m), T (s) 'Venus': (108.2e9, 224.7 * 86400), 'Earth': (149.6e9, 365.25 * 86400), 'Mars': (227.9e9, 687 * 86400), 'Jupiter': (778.5e9, 4332.59 * 86400) } r_values = np.array([data[0] for data in planets.values()]) T_values = np.array([data[1] for data in planets.values()]) T2 = T_values**2 r3 = r_values**3 plt.figure(figsize=(10, 6)) plt.loglog(r3, T2, 'bo', label='Planets') r_fit = np.logspace(16, 19, 100) T_fit = (4 * np.pi**2 / (G * M_sun))**(0.5) * r_fit**(1.5) plt.loglog(r_fit, T_fit, 'r--', label='Kepler\u2019s Law') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('T\u00b2 vs r\u00b3 Relationship') plt.grid(True) plt.legend() plt.savefig('kepler_law.png') # Save as file plt.show() # Verification for name, (r, T) in planets.items(): T_calc = orbital_period(r, M_sun) print(f\"{name}: Calculated T = {T_calc/86400:.2f} days, Actual T = {T/86400:.2f} days\") Code simulates orbits and verifies Kepler\u2019s Law, saving figures as circular_orbit.png and kepler_law.png . Graphical Interpretation Figure 1 : Visualizes the Moon\u2019s circular orbit around Earth, emphasizing the radius. Figure 2 : Log-log plot confirms \\(T^2 \\propto r^3\\) for Solar System planets, with a fitted line. 5. Extensions and Limitations Extensions Elliptical Orbits : Kepler\u2019s original law uses semi-major axis \\(a\\) instead of \\(r\\) : \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) . For circular orbits, \\(a = r\\) . Binary Systems : Applies to stars orbiting each other, revealing total system mass. Limitations Circular Assumption : Ignores eccentricity. Single Body : Assumes \\(M \\gg m\\) , neglecting satellite mass. Example Scenarios GPS Satellite : At \\(r = 26,560\\) km, \\(T \\approx 11.97\\) hours. Using \\(M_{\\text{Earth}}\\) , \\(T^2 / r^3 \\approx 1.36 \\times 10^{-14}\\) s\u00b2/m\u00b3 matches theory, ensuring precise timing. Jupiter\u2019s Moons : Io\u2019s \\(r = 421,700\\) km, \\(T = 1.77\\) days yields Jupiter\u2019s mass via \\(M = \\frac{4\\pi^2 r^3}{G T^2} \\approx 1.898 \\times 10^{27}\\) kg, aligning with observations. Conclusion Kepler\u2019s Third Law ( \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) ) elegantly ties orbital period to radius, enabling mass and distance calculations across celestial scales. Simulations and examples like the Moon and planets validate this relationship, with extensions to elliptical orbits broadening its scope. Future work could model eccentric orbits or multi-body systems for deeper insights.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-3","text":"Orbital Period and Orbital Radius","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deriving-keplers-third-law-for-circular-orbits","text":"Kepler\u2019s Third Law relates the square of the orbital period ( \\(T^2\\) ) to the cube of the orbital radius ( \\(r^3\\) ) for bodies in circular orbits under gravitational influence. Start with Newton\u2019s law of gravitation and centripetal force for a satellite (mass \\(m\\) ) orbiting a central body (mass \\(M\\) ): Gravitational force: \\(F_g = \\frac{G M m}{r^2}\\) Centripetal force required for circular motion: \\(F_c = \\frac{m v^2}{r}\\) Equate these forces: \\(\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\) Cancel \\(m\\) (assuming \\(m \\neq 0\\) ) and simplify: \\(\\frac{G M}{r^2} = \\frac{v^2}{r}\\) Multiply through by \\(r\\) : \\(\\frac{G M}{r} = v^2\\) The orbital velocity \\(v\\) relates to the period \\(T\\) via the circumference: \\(v = \\frac{2\\pi r}{T}\\) . Substitute: \\(\\frac{G M}{r} = \\left(\\frac{2\\pi r}{T}\\right)^2\\) Simplify: \\(\\frac{G M}{r} = \\frac{4\\pi^2 r^2}{T^2}\\) Rearrange: \\(G M = \\frac{4\\pi^2 r^3}{T^2}\\) Solve for \\(T^2\\) : \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) This is Kepler\u2019s Third Law for circular orbits, where \\(T^2 \\propto r^3\\) , and the constant \\(\\frac{4\\pi^2}{G M}\\) depends on the central mass \\(M\\) .","title":"Deriving Kepler\u2019s Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications","text":"Mass Determination : If \\(T\\) and \\(r\\) are measured, \\(M\\) can be calculated: \\(M = \\frac{4\\pi^2 r^3}{G T^2}\\) . Distance Estimation : Known \\(M\\) and \\(T\\) allow solving for \\(r\\) .","title":"Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-astronomical-implications","text":"Kepler\u2019s Third Law enables: - Planetary Masses : Observing satellite orbits (e.g., moons) reveals the parent body\u2019s mass. - Orbital Radii : Period measurements of planets or asteroids refine their distances from the Sun. - System Stability : Predicts stable orbits for artificial satellites.","title":"2. Astronomical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"Moon\u2019s Orbit : \\(r \\approx 384,400\\) km, \\(T \\approx 27.32\\) days. Using \\(M_{\\text{Earth}} \\approx 5.972 \\times 10^{24}\\) kg, the law holds, confirming Earth\u2019s mass. Earth\u2019s Orbit : \\(r \\approx 1\\) AU ( \\(149.6 \\times 10^6\\) km), \\(T = 1\\) year, used historically to define the AU via the Sun\u2019s mass.","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphical-outputs","text":"Figure 1: Circular Orbit Visualization Shows a satellite tracing a circular path around a central body. Figure 2: \\(T^2\\) vs. \\(r^3\\) Relationship Log-log plot of \\(T^2\\) vs. \\(r^3\\) for Solar System planets, showing linearity.","title":"Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg (Sun\u2019s mass) M_earth = 5.972e24 # kg def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Figure 1: Circular Orbit t = np.linspace(0, 2 * np.pi, 100) r_moon = 384400e3 # m x = r_moon * np.cos(t) y = r_moon * np.sin(t) plt.figure(figsize=(8, 8)) plt.plot(x, y, 'b-', label='Moon\u2019s Orbit') plt.plot(0, 0, 'yo', label='Earth', markersize=10) plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Circular Orbit Visualization') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('circular_orbit.png') # Save as file plt.show() # Figure 2: T\u00b2 vs r\u00b3 planets = { 'Mercury': (57.9e9, 87.97 * 86400), # r (m), T (s) 'Venus': (108.2e9, 224.7 * 86400), 'Earth': (149.6e9, 365.25 * 86400), 'Mars': (227.9e9, 687 * 86400), 'Jupiter': (778.5e9, 4332.59 * 86400) } r_values = np.array([data[0] for data in planets.values()]) T_values = np.array([data[1] for data in planets.values()]) T2 = T_values**2 r3 = r_values**3 plt.figure(figsize=(10, 6)) plt.loglog(r3, T2, 'bo', label='Planets') r_fit = np.logspace(16, 19, 100) T_fit = (4 * np.pi**2 / (G * M_sun))**(0.5) * r_fit**(1.5) plt.loglog(r_fit, T_fit, 'r--', label='Kepler\u2019s Law') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('T\u00b2 vs r\u00b3 Relationship') plt.grid(True) plt.legend() plt.savefig('kepler_law.png') # Save as file plt.show() # Verification for name, (r, T) in planets.items(): T_calc = orbital_period(r, M_sun) print(f\"{name}: Calculated T = {T_calc/86400:.2f} days, Actual T = {T/86400:.2f} days\") Code simulates orbits and verifies Kepler\u2019s Law, saving figures as circular_orbit.png and kepler_law.png .","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphical-interpretation","text":"Figure 1 : Visualizes the Moon\u2019s circular orbit around Earth, emphasizing the radius. Figure 2 : Log-log plot confirms \\(T^2 \\propto r^3\\) for Solar System planets, with a fitted line.","title":"Graphical Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extensions-and-limitations","text":"","title":"5. Extensions and Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extensions","text":"Elliptical Orbits : Kepler\u2019s original law uses semi-major axis \\(a\\) instead of \\(r\\) : \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) . For circular orbits, \\(a = r\\) . Binary Systems : Applies to stars orbiting each other, revealing total system mass.","title":"Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#limitations","text":"Circular Assumption : Ignores eccentricity. Single Body : Assumes \\(M \\gg m\\) , neglecting satellite mass.","title":"Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-scenarios","text":"GPS Satellite : At \\(r = 26,560\\) km, \\(T \\approx 11.97\\) hours. Using \\(M_{\\text{Earth}}\\) , \\(T^2 / r^3 \\approx 1.36 \\times 10^{-14}\\) s\u00b2/m\u00b3 matches theory, ensuring precise timing. Jupiter\u2019s Moons : Io\u2019s \\(r = 421,700\\) km, \\(T = 1.77\\) days yields Jupiter\u2019s mass via \\(M = \\frac{4\\pi^2 r^3}{G T^2} \\approx 1.898 \\times 10^{27}\\) kg, aligning with observations.","title":"Example Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s Third Law ( \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) ) elegantly ties orbital period to radius, enabling mass and distance calculations across celestial scales. Simulations and examples like the Moon and planets validate this relationship, with extensions to elliptical orbits broadening its scope. Future work could model eccentric orbits or multi-body systems for deeper insights.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"I\u2019ll update the text for \"Problem 4: Escape Velocities and Cosmic Velocities\" to include the specific PNG file you provided, which is named cosmic_velocities.png (as generated by the script and shown in your image). I\u2019ll adjust the \"Graphical Outputs\" section to reference this file explicitly, ensuring it matches the bar chart you\u2019ve shared. The rest of the text remains unchanged unless specified. Problem 4 Escape Velocities and Cosmic Velocities 1. Theoretical Foundation Definitions and Derivations Cosmic velocities describe critical speeds for overcoming gravitational potentials in space: First Cosmic Velocity ( \\(v_1\\) ) : Orbital velocity for a circular orbit near a body\u2019s surface. Second Cosmic Velocity ( \\(v_2\\) ) : Escape velocity to leave a body\u2019s gravitational influence. Third Cosmic Velocity ( \\(v_3\\) ) : Velocity to escape a star system (e.g., Solar System) from a planet\u2019s surface. First Cosmic Velocity ( \\(v_1\\) ) For a circular orbit at radius \\(r\\) (approximately the body\u2019s radius \\(R\\) for surface orbits), gravitational force equals centripetal force: \\(\\frac{G M m}{r^2} = \\frac{m v_1^2}{r}\\) Cancel \\(m\\) and solve: \\(v_1^2 = \\frac{G M}{r}\\) \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) For surface orbits, \\(r = R\\) . Second Cosmic Velocity ( \\(v_2\\) ) Escape velocity is derived from conservation of energy, where kinetic energy equals gravitational potential energy at infinity: \\(\\frac{1}{2} m v_2^2 = \\frac{G M m}{r}\\) Cancel \\(m\\) and solve: \\(v_2^2 = \\frac{2 G M}{r}\\) \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) At the surface, \\(r = R\\) , and \\(v_2 = \\sqrt{2} \\cdot v_1\\) . Third Cosmic Velocity ( \\(v_3\\) ) Velocity to escape the Sun\u2019s gravity from a planet\u2019s surface, starting at distance \\(r_p\\) from the Sun. Total energy must reach zero at infinity: \\(\\frac{1}{2} m v_3^2 - \\frac{G M_{\\text{sun}} m}{r_p} - \\frac{G M m}{r} = 0\\) Solve: \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) For Earth, \\(r = R_{\\text{earth}}\\) , \\(r_p = 1\\) AU. Parameters \\(G\\) : Gravitational constant \\(M\\) : Mass of the celestial body \\(r\\) : Radius (or distance from center) \\(M_{\\text{sun}}\\) : Sun\u2019s mass \\(r_p\\) : Planet\u2019s distance from the Sun 2. Analysis of Parameters Mass ( \\(M\\) ) : Higher \\(M\\) increases all velocities. Radius ( \\(r\\) ) : Larger \\(r\\) decreases velocities. Solar Distance ( \\(r_p\\) ) : Affects \\(v_3\\) , with closer orbits requiring higher speeds. 3. Calculations for Celestial Bodies Earth : \\(M = 5.972 \\times 10^{24}\\) kg, \\(R = 6,371\\) km, \\(r_p = 1\\) AU \\(v_1 = 7.91\\) km/s \\(v_2 = 11.19\\) km/s \\(v_3 \\approx 42.1\\) km/s Mars : \\(M = 6.417 \\times 10^{23}\\) kg, \\(R = 3,390\\) km, \\(r_p = 1.524\\) AU \\(v_1 = 3.55\\) km/s \\(v_2 = 5.03\\) km/s \\(v_3 \\approx 34.7\\) km/s Jupiter : \\(M = 1.898 \\times 10^{27}\\) kg, \\(R = 69,911\\) km, \\(r_p = 5.2\\) AU \\(v_1 = 42.1\\) km/s \\(v_2 = 59.5\\) km/s \\(v_3 \\approx 61.0\\) km/s 4. Implementation Graphical Outputs Figure 1: Cosmic Velocities Comparison Bar chart comparing \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) for Earth, Mars, and Jupiter, as shown in the generated plot. Python Simulation import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg AU = 149.6e9 # m bodies = { 'Earth': {'M': 5.972e24, 'R': 6371e3, 'r_p': 1 * AU}, 'Mars': {'M': 6.417e23, 'R': 3390e3, 'r_p': 1.524 * AU}, 'Jupiter': {'M': 1.898e27, 'R': 69911e3, 'r_p': 5.2 * AU} } def v1(M, r): return np.sqrt(G * M / r) / 1000 # km/s def v2(M, r): return np.sqrt(2 * G * M / r) / 1000 # km/s def v3(M, r, M_sun, r_p): return np.sqrt((2 * G * M / r) + (2 * G * M_sun / r_p)) / 1000 # km/s # Calculate velocities velocities = {body: [v1(data['M'], data['R']), v2(data['M'], data['R']), v3(data['M'], data['R'], M_sun, data['r_p'])] for body, data in bodies.items()} # Figure 1: Bar Chart labels = ['v\u2081 (Orbit)', 'v\u2082 (Escape)', 'v\u2083 (Solar Escape)'] x = np.arange(len(labels)) width = 0.2 plt.figure(figsize=(10, 6)) for i, (body, vels) in enumerate(velocities.items()): plt.bar(x + i * width, vels, width, label=body) plt.xlabel('Velocity Type') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.xticks(x + width, labels) plt.legend() plt.grid(True, alpha=0.3) plt.savefig('cosmic_velocities.png') plt.show() # Print results for body, vels in velocities.items(): print(f\"{body}: v\u2081 = {vels[0]:.2f} km/s, v\u2082 = {vels[1]:.2f} km/s, v\u2083 = {vels[2]:.2f} km/s\") Code calculates and visualizes cosmic velocities, saving the bar chart as cosmic_velocities.png . Graphical Interpretation Figure 1 : Bar chart contrasts \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) across Earth, Mars, and Jupiter, highlighting scale differences. Jupiter\u2019s velocities are significantly higher due to its mass, while Mars has the lowest due to its smaller size and mass. 5. Importance in Space Exploration Satellites : \\(v_1\\) ensures low Earth orbit (e.g., 7.91 km/s for Earth). Planetary Missions : \\(v_2\\) enables escape (e.g., 11.19 km/s for Mars missions). Interstellar Travel : \\(v_3\\) sets the threshold for leaving the Solar System (e.g., Voyager 1 exceeded 42.1 km/s with boosts). Example Scenarios Mars Rover Launch : Requires \\(v_2 = 5.03\\) km/s to escape Mars, achievable with current rockets, enabling sample return missions. Jupiter Probe : A probe needs \\(v_3 \\approx 61\\) km/s from Jupiter\u2019s surface to exit the Solar System, illustrating the challenge of gas giant missions. Conclusion The cosmic velocities\u2014 \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) , \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) , and \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) \u2014define thresholds for orbiting, escaping, and leaving star systems. Calculations and visualizations for Earth, Mars, and Jupiter underscore their role in space exploration, from satellite launches to interstellar aspirations. Future models could include atmospheric drag or multi-body effects.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-4","text":"Escape Velocities and Cosmic Velocities","title":"Problem 4"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-and-derivations","text":"Cosmic velocities describe critical speeds for overcoming gravitational potentials in space: First Cosmic Velocity ( \\(v_1\\) ) : Orbital velocity for a circular orbit near a body\u2019s surface. Second Cosmic Velocity ( \\(v_2\\) ) : Escape velocity to leave a body\u2019s gravitational influence. Third Cosmic Velocity ( \\(v_3\\) ) : Velocity to escape a star system (e.g., Solar System) from a planet\u2019s surface.","title":"Definitions and Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-v_1","text":"For a circular orbit at radius \\(r\\) (approximately the body\u2019s radius \\(R\\) for surface orbits), gravitational force equals centripetal force: \\(\\frac{G M m}{r^2} = \\frac{m v_1^2}{r}\\) Cancel \\(m\\) and solve: \\(v_1^2 = \\frac{G M}{r}\\) \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) For surface orbits, \\(r = R\\) .","title":"First Cosmic Velocity (\\(v_1\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-v_2","text":"Escape velocity is derived from conservation of energy, where kinetic energy equals gravitational potential energy at infinity: \\(\\frac{1}{2} m v_2^2 = \\frac{G M m}{r}\\) Cancel \\(m\\) and solve: \\(v_2^2 = \\frac{2 G M}{r}\\) \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) At the surface, \\(r = R\\) , and \\(v_2 = \\sqrt{2} \\cdot v_1\\) .","title":"Second Cosmic Velocity (\\(v_2\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-v_3","text":"Velocity to escape the Sun\u2019s gravity from a planet\u2019s surface, starting at distance \\(r_p\\) from the Sun. Total energy must reach zero at infinity: \\(\\frac{1}{2} m v_3^2 - \\frac{G M_{\\text{sun}} m}{r_p} - \\frac{G M m}{r} = 0\\) Solve: \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) For Earth, \\(r = R_{\\text{earth}}\\) , \\(r_p = 1\\) AU.","title":"Third Cosmic Velocity (\\(v_3\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameters","text":"\\(G\\) : Gravitational constant \\(M\\) : Mass of the celestial body \\(r\\) : Radius (or distance from center) \\(M_{\\text{sun}}\\) : Sun\u2019s mass \\(r_p\\) : Planet\u2019s distance from the Sun","title":"Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-analysis-of-parameters","text":"Mass ( \\(M\\) ) : Higher \\(M\\) increases all velocities. Radius ( \\(r\\) ) : Larger \\(r\\) decreases velocities. Solar Distance ( \\(r_p\\) ) : Affects \\(v_3\\) , with closer orbits requiring higher speeds.","title":"2. Analysis of Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-calculations-for-celestial-bodies","text":"Earth : \\(M = 5.972 \\times 10^{24}\\) kg, \\(R = 6,371\\) km, \\(r_p = 1\\) AU \\(v_1 = 7.91\\) km/s \\(v_2 = 11.19\\) km/s \\(v_3 \\approx 42.1\\) km/s Mars : \\(M = 6.417 \\times 10^{23}\\) kg, \\(R = 3,390\\) km, \\(r_p = 1.524\\) AU \\(v_1 = 3.55\\) km/s \\(v_2 = 5.03\\) km/s \\(v_3 \\approx 34.7\\) km/s Jupiter : \\(M = 1.898 \\times 10^{27}\\) kg, \\(R = 69,911\\) km, \\(r_p = 5.2\\) AU \\(v_1 = 42.1\\) km/s \\(v_2 = 59.5\\) km/s \\(v_3 \\approx 61.0\\) km/s","title":"3. Calculations for Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#graphical-outputs","text":"Figure 1: Cosmic Velocities Comparison Bar chart comparing \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) for Earth, Mars, and Jupiter, as shown in the generated plot.","title":"Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M_sun = 1.989e30 # kg AU = 149.6e9 # m bodies = { 'Earth': {'M': 5.972e24, 'R': 6371e3, 'r_p': 1 * AU}, 'Mars': {'M': 6.417e23, 'R': 3390e3, 'r_p': 1.524 * AU}, 'Jupiter': {'M': 1.898e27, 'R': 69911e3, 'r_p': 5.2 * AU} } def v1(M, r): return np.sqrt(G * M / r) / 1000 # km/s def v2(M, r): return np.sqrt(2 * G * M / r) / 1000 # km/s def v3(M, r, M_sun, r_p): return np.sqrt((2 * G * M / r) + (2 * G * M_sun / r_p)) / 1000 # km/s # Calculate velocities velocities = {body: [v1(data['M'], data['R']), v2(data['M'], data['R']), v3(data['M'], data['R'], M_sun, data['r_p'])] for body, data in bodies.items()} # Figure 1: Bar Chart labels = ['v\u2081 (Orbit)', 'v\u2082 (Escape)', 'v\u2083 (Solar Escape)'] x = np.arange(len(labels)) width = 0.2 plt.figure(figsize=(10, 6)) for i, (body, vels) in enumerate(velocities.items()): plt.bar(x + i * width, vels, width, label=body) plt.xlabel('Velocity Type') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.xticks(x + width, labels) plt.legend() plt.grid(True, alpha=0.3) plt.savefig('cosmic_velocities.png') plt.show() # Print results for body, vels in velocities.items(): print(f\"{body}: v\u2081 = {vels[0]:.2f} km/s, v\u2082 = {vels[1]:.2f} km/s, v\u2083 = {vels[2]:.2f} km/s\") Code calculates and visualizes cosmic velocities, saving the bar chart as cosmic_velocities.png .","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#graphical-interpretation","text":"Figure 1 : Bar chart contrasts \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) across Earth, Mars, and Jupiter, highlighting scale differences. Jupiter\u2019s velocities are significantly higher due to its mass, while Mars has the lowest due to its smaller size and mass.","title":"Graphical Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-importance-in-space-exploration","text":"Satellites : \\(v_1\\) ensures low Earth orbit (e.g., 7.91 km/s for Earth). Planetary Missions : \\(v_2\\) enables escape (e.g., 11.19 km/s for Mars missions). Interstellar Travel : \\(v_3\\) sets the threshold for leaving the Solar System (e.g., Voyager 1 exceeded 42.1 km/s with boosts).","title":"5. Importance in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-scenarios","text":"Mars Rover Launch : Requires \\(v_2 = 5.03\\) km/s to escape Mars, achievable with current rockets, enabling sample return missions. Jupiter Probe : A probe needs \\(v_3 \\approx 61\\) km/s from Jupiter\u2019s surface to exit the Solar System, illustrating the challenge of gas giant missions.","title":"Example Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_2/#conclusion","text":"The cosmic velocities\u2014 \\(v_1 = \\sqrt{\\frac{G M}{r}}\\) , \\(v_2 = \\sqrt{\\frac{2 G M}{r}}\\) , and \\(v_3 = \\sqrt{\\frac{2 G M}{r} + \\frac{2 G M_{\\text{sun}}}{r_p}}\\) \u2014define thresholds for orbiting, escaping, and leaving star systems. Calculations and visualizations for Earth, Mars, and Jupiter underscore their role in space exploration, from satellite launches to interstellar aspirations. Future models could include atmospheric drag or multi-body effects.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth 1. Theoretical Foundation Analyzing Possible Trajectories When a payload is released from a moving rocket near Earth, its trajectory depends on its specific energy, determined by its initial position and velocity. Using Newton\u2019s law of gravitation, the force on the payload (mass \\(m\\) ) due to Earth (mass \\(M\\) ) is: \\(F = \\frac{G M m}{r^2}\\) The specific mechanical energy \\(\\epsilon\\) of the payload determines its trajectory: \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) Where \\(v\\) is the payload\u2019s velocity, \\(r\\) is its distance from Earth\u2019s center, \\(G\\) is the gravitational constant, and \\(M\\) is Earth\u2019s mass. The trajectory type is classified as: Elliptical : \\(\\epsilon < 0\\) (bound orbit, e.g., satellite deployment). Parabolic : \\(\\epsilon = 0\\) (escape trajectory at critical velocity). Hyperbolic : \\(\\epsilon > 0\\) (escape with excess velocity). The eccentricity \\(e\\) further defines the orbit: \\(e = \\sqrt{1 + \\frac{2 \\epsilon h^2}{(G M)^2}}\\) Where \\(h = r v \\cos\\phi\\) is the specific angular momentum, and \\(\\phi\\) is the angle between the velocity vector and the radial direction. For \\(e < 1\\) (elliptical), \\(e = 1\\) (parabolic), \\(e > 1\\) (hyperbolic). Equations of Motion In Cartesian coordinates, the acceleration due to gravity is: \\(\\frac{d^2 x}{dt^2} = -\\frac{G M x}{r^3}, \\quad \\frac{d^2 y}{dt^2} = -\\frac{G M y}{r^3}\\) Where \\(r = \\sqrt{x^2 + y^2}\\) . These equations are solved numerically given initial conditions (position, velocity, altitude). 2. Numerical Analysis Consider a payload released at altitude \\(h = 500\\) km ( \\(r = R_{\\text{earth}} + h = 6,871\\) km), with initial velocity \\(v_0\\) at angle \\(\\phi\\) relative to the radial direction. Earth\u2019s parameters: \\(M = 5.972 \\times 10^{24}\\) kg, \\(R_{\\text{earth}} = 6,371\\) km, \\(G = 6.67430 \\times 10^{-11}\\) m\u00b3 kg\u207b\u00b9 s\u207b\u00b2. Escape Velocity : \\(v_{\\text{esc}} = \\sqrt{\\frac{2 G M}{r}} \\approx 10.9\\) km/s at \\(h = 500\\) km. Circular Orbit Velocity : \\(v_{\\text{circ}} = \\sqrt{\\frac{G M}{r}} \\approx 7.7\\) km/s. Test cases: - \\(v_0 = 7.5\\) km/s, \\(\\phi = 90^\\circ\\) : Slightly below circular velocity, expect an elliptical orbit. - \\(v_0 = 10.9\\) km/s, \\(\\phi = 90^\\circ\\) : Parabolic trajectory. - \\(v_0 = 12.0\\) km/s, \\(\\phi = 90^\\circ\\) : Hyperbolic trajectory. 3. Applications to Space Missions Orbital Insertion : \\(v_0 \\approx v_{\\text{circ}}\\) places the payload in a stable orbit (e.g., satellite deployment). Reentry : Low \\(v_0\\) leads to an elliptical orbit intersecting Earth, simulating reentry. Escape : \\(v_0 \\geq v_{\\text{esc}}\\) allows escape, relevant for interplanetary missions. 4. Implementation Graphical Outputs Figure 1: Payload Trajectories Near Earth Plots elliptical, parabolic, and hyperbolic trajectories with Earth at the origin, as shown in the generated plot. Python Simulation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M = 5.972e24 # kg (Earth\u2019s mass) R_earth = 6371e3 # m def deriv(state, t): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 return [vx, vy, ax, ay] # Initial conditions h = 500e3 # Altitude (m) r0 = R_earth + h t = np.linspace(0, 3600, 1000) # 1 hour # Velocities for different trajectories v_circ = np.sqrt(G * M / r0) # Circular velocity v_esc = np.sqrt(2 * G * M / r0) # Escape velocity cases = [ ('Elliptical', 0.975 * v_circ, 'b'), # Below circular ('Parabolic', v_esc, 'g'), # At escape ('Hyperbolic', 1.1 * v_esc, 'r') # Above escape ] plt.figure(figsize=(10, 10)) for label, v0, color in cases: state0 = [r0, 0, 0, v0] # Start at (r0, 0) with velocity in y-direction sol = odeint(deriv, state0, t) plt.plot(sol[:, 0], sol[:, 1], color, label=label) # Plot Earth theta = np.linspace(0, 2 * np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k-', label='Earth') plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Payload Trajectories Near Earth') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('payload_trajectories.png') plt.show() Code simulates and visualizes payload trajectories, saving the plot as payload_trajectories.png . Graphical Interpretation Figure 1 : Displays three trajectories starting at an altitude of 500 km: Elliptical (blue) : The payload loops back toward Earth, forming a closed orbit with perigee closer to Earth. Parabolic (green) : The payload just escapes, following a path that asymptotically approaches infinity. Hyperbolic (red) : The payload escapes with excess speed, following a sharply diverging trajectory away from Earth. 5. Limitations and Extensions Limitations No Drag : Ignores atmospheric effects at low altitudes. Simplified Gravity : Assumes point-mass Earth, neglecting oblateness. Example Scenarios Satellite Deployment : At \\(v_0 = 7.5\\) km/s, the payload enters an elliptical orbit, ideal for a communication satellite. Lunar Mission : At \\(v_0 = 12\\) km/s, a hyperbolic trajectory ensures escape toward the Moon. Conclusion The payload\u2019s trajectory\u2014elliptical ( \\(\\epsilon < 0\\) ), parabolic ( \\(\\epsilon = 0\\) ), or hyperbolic ( \\(\\epsilon > 0\\) )\u2014depends on its specific energy \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) . Numerical simulations reveal these paths, supporting applications like satellite deployment and lunar missions. Future work could include drag or multi-body effects for realism.","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"Trajectories of a Freely Released Payload Near Earth","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#analyzing-possible-trajectories","text":"When a payload is released from a moving rocket near Earth, its trajectory depends on its specific energy, determined by its initial position and velocity. Using Newton\u2019s law of gravitation, the force on the payload (mass \\(m\\) ) due to Earth (mass \\(M\\) ) is: \\(F = \\frac{G M m}{r^2}\\) The specific mechanical energy \\(\\epsilon\\) of the payload determines its trajectory: \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) Where \\(v\\) is the payload\u2019s velocity, \\(r\\) is its distance from Earth\u2019s center, \\(G\\) is the gravitational constant, and \\(M\\) is Earth\u2019s mass. The trajectory type is classified as: Elliptical : \\(\\epsilon < 0\\) (bound orbit, e.g., satellite deployment). Parabolic : \\(\\epsilon = 0\\) (escape trajectory at critical velocity). Hyperbolic : \\(\\epsilon > 0\\) (escape with excess velocity). The eccentricity \\(e\\) further defines the orbit: \\(e = \\sqrt{1 + \\frac{2 \\epsilon h^2}{(G M)^2}}\\) Where \\(h = r v \\cos\\phi\\) is the specific angular momentum, and \\(\\phi\\) is the angle between the velocity vector and the radial direction. For \\(e < 1\\) (elliptical), \\(e = 1\\) (parabolic), \\(e > 1\\) (hyperbolic).","title":"Analyzing Possible Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion","text":"In Cartesian coordinates, the acceleration due to gravity is: \\(\\frac{d^2 x}{dt^2} = -\\frac{G M x}{r^3}, \\quad \\frac{d^2 y}{dt^2} = -\\frac{G M y}{r^3}\\) Where \\(r = \\sqrt{x^2 + y^2}\\) . These equations are solved numerically given initial conditions (position, velocity, altitude).","title":"Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-numerical-analysis","text":"Consider a payload released at altitude \\(h = 500\\) km ( \\(r = R_{\\text{earth}} + h = 6,871\\) km), with initial velocity \\(v_0\\) at angle \\(\\phi\\) relative to the radial direction. Earth\u2019s parameters: \\(M = 5.972 \\times 10^{24}\\) kg, \\(R_{\\text{earth}} = 6,371\\) km, \\(G = 6.67430 \\times 10^{-11}\\) m\u00b3 kg\u207b\u00b9 s\u207b\u00b2. Escape Velocity : \\(v_{\\text{esc}} = \\sqrt{\\frac{2 G M}{r}} \\approx 10.9\\) km/s at \\(h = 500\\) km. Circular Orbit Velocity : \\(v_{\\text{circ}} = \\sqrt{\\frac{G M}{r}} \\approx 7.7\\) km/s. Test cases: - \\(v_0 = 7.5\\) km/s, \\(\\phi = 90^\\circ\\) : Slightly below circular velocity, expect an elliptical orbit. - \\(v_0 = 10.9\\) km/s, \\(\\phi = 90^\\circ\\) : Parabolic trajectory. - \\(v_0 = 12.0\\) km/s, \\(\\phi = 90^\\circ\\) : Hyperbolic trajectory.","title":"2. Numerical Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-applications-to-space-missions","text":"Orbital Insertion : \\(v_0 \\approx v_{\\text{circ}}\\) places the payload in a stable orbit (e.g., satellite deployment). Reentry : Low \\(v_0\\) leads to an elliptical orbit intersecting Earth, simulating reentry. Escape : \\(v_0 \\geq v_{\\text{esc}}\\) allows escape, relevant for interplanetary missions.","title":"3. Applications to Space Missions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#graphical-outputs","text":"Figure 1: Payload Trajectories Near Earth Plots elliptical, parabolic, and hyperbolic trajectories with Earth at the origin, as shown in the generated plot.","title":"Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint G = 6.67430e-11 # m\u00b3 kg\u207b\u00b9 s\u207b\u00b2 M = 5.972e24 # kg (Earth\u2019s mass) R_earth = 6371e3 # m def deriv(state, t): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -G * M * x / r**3 ay = -G * M * y / r**3 return [vx, vy, ax, ay] # Initial conditions h = 500e3 # Altitude (m) r0 = R_earth + h t = np.linspace(0, 3600, 1000) # 1 hour # Velocities for different trajectories v_circ = np.sqrt(G * M / r0) # Circular velocity v_esc = np.sqrt(2 * G * M / r0) # Escape velocity cases = [ ('Elliptical', 0.975 * v_circ, 'b'), # Below circular ('Parabolic', v_esc, 'g'), # At escape ('Hyperbolic', 1.1 * v_esc, 'r') # Above escape ] plt.figure(figsize=(10, 10)) for label, v0, color in cases: state0 = [r0, 0, 0, v0] # Start at (r0, 0) with velocity in y-direction sol = odeint(deriv, state0, t) plt.plot(sol[:, 0], sol[:, 1], color, label=label) # Plot Earth theta = np.linspace(0, 2 * np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k-', label='Earth') plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.title('Payload Trajectories Near Earth') plt.axis('equal') plt.grid(True) plt.legend() plt.savefig('payload_trajectories.png') plt.show() Code simulates and visualizes payload trajectories, saving the plot as payload_trajectories.png .","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#graphical-interpretation","text":"Figure 1 : Displays three trajectories starting at an altitude of 500 km: Elliptical (blue) : The payload loops back toward Earth, forming a closed orbit with perigee closer to Earth. Parabolic (green) : The payload just escapes, following a path that asymptotically approaches infinity. Hyperbolic (red) : The payload escapes with excess speed, following a sharply diverging trajectory away from Earth.","title":"Graphical Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#5-limitations-and-extensions","text":"","title":"5. Limitations and Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#limitations","text":"No Drag : Ignores atmospheric effects at low altitudes. Simplified Gravity : Assumes point-mass Earth, neglecting oblateness.","title":"Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#example-scenarios","text":"Satellite Deployment : At \\(v_0 = 7.5\\) km/s, the payload enters an elliptical orbit, ideal for a communication satellite. Lunar Mission : At \\(v_0 = 12\\) km/s, a hyperbolic trajectory ensures escape toward the Moon.","title":"Example Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_3/#conclusion","text":"The payload\u2019s trajectory\u2014elliptical ( \\(\\epsilon < 0\\) ), parabolic ( \\(\\epsilon = 0\\) ), or hyperbolic ( \\(\\epsilon > 0\\) )\u2014depends on its specific energy \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) . Numerical simulations reveal these paths, supporting applications like satellite deployment and lunar missions. Future work could include drag or multi-body effects for realism.","title":"Conclusion"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}